{"version":3,"file":"nostache.js","sources":["../src/index.ts"],"sourcesContent":["function charCode(char: string) {\r\n    if (char.length > 1) {\r\n        const map: Record<number, boolean> = {};\r\n        for (let i = 0; i < char.length; i++) {\r\n            map[char.charCodeAt(i)] = true;\r\n        }\r\n        return map;\r\n    }\r\n    return char.charCodeAt(0);\r\n}\r\n\r\nconst isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\nconst OPEN_ANGLE = charCode(\"<\");\r\nconst CLOSE_ANGLE = charCode(\">\");\r\nconst OPEN_BRACE = charCode(\"{\");\r\nconst CLOSE_BRACE = charCode(\"}\");\r\nconst SEMICOLON = charCode(\";\");\r\nconst EQUAL = charCode(\"=\");\r\n\r\nexport default function Nostache(template: string): (context?: unknown) => string {\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    const result = \"__var__\";\r\n    let funcBody = `let ${result}='';\\n`;\r\n\r\n    function appendResult() {\r\n        if (index > startIndex) {\r\n            funcBody += `${result}+='${sliceHtml()\r\n                .replace(/\\\\/g, \"\\\\\\\\\")\r\n                .replace(/'/g, \"\\\\'\")\r\n            }';\\n`;\r\n        }\r\n    }\r\n\r\n    function appendOutput() {\r\n        if (index > startIndex) {\r\n            funcBody += `${result}+=${sliceCode()};\\n`;\r\n        }\r\n    }\r\n\r\n    function appendLogic() {\r\n        if (index > startIndex) {\r\n            funcBody += `${sliceCode()}\\n`;\r\n        }\r\n    }\r\n\r\n    function sliceCode() {\r\n        return template\r\n            .slice(startIndex, index)\r\n            .replace(/^\\s+/, \"\")\r\n            .replace(/\\s+$/, \"\");\r\n    }\r\n\r\n    function sliceHtml() {\r\n        return template\r\n            .slice(startIndex, index)\r\n            .replace(/^\\s+</, \"<\")\r\n            .replace(/>\\s+$/, \">\");\r\n    }\r\n\r\n    function parseOpenBlock(c: number) {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === EQUAL && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock();\r\n            return true;\r\n        } else if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === SEMICOLON && template.charCodeAt(index + 2) === CLOSE_ANGLE) {\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            index++;\r\n            appendLogic();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseStart() {\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // no action\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        appendResult();\r\n    }\r\n\r\n    function parseLogicBlock() {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialHtml = true;\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseHtmlBlock() {\r\n        startIndex = index;\r\n        let isPotentialEnd = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // no action\r\n            } else if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                isPotentialEnd = true;\r\n            } else if (isPotentialEnd && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialEnd && c === CLOSE_BRACE) {\r\n                appendResult();\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialEnd = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseOutputBlock() {\r\n        startIndex = index;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput();\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else if (isWhitespace[c]) {\r\n                index++;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    parseStart();\r\n    funcBody += `return ${result};`;\r\n\r\n    return (context?: unknown) => {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        const baseObject = {};\r\n        if (context && typeof context === \"object\") {\r\n            for (const p in context) {\r\n                if (!(p in baseObject) && /^[_a-z]\\w*$/i.test(p)) {\r\n                    argNames.push(p);\r\n                    argValues.push((context as any)[p]);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            return Function(...argNames, funcBody).apply(context, argValues);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function (${argNames.join(\", \")}) {\\n${funcBody}\\n}`;\r\n            throw error;\r\n        }\r\n    };\r\n}"],"names":[],"mappings":"iPAAA,SAAS,QAAQ,CAAC,IAAY,EAAA;AAC1B,IAAA,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACjB,MAAM,GAAG,GAA4B,EAAE,CAAC;AACxC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SAClC;AACD,QAAA,OAAO,GAAG,CAAC;KACd;AACD,IAAA,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,YAAY,GAAG,QAAQ,CAAC,SAAS,CAA4B,CAAC;AACpE,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAClC,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAClC,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAChC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAEJ,SAAA,QAAQ,CAAC,QAAgB,EAAA;IAE7C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,IAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IAC/B,MAAM,MAAM,GAAG,SAAS,CAAC;AACzB,IAAA,IAAI,QAAQ,GAAG,CAAO,IAAA,EAAA,MAAM,QAAQ,CAAC;AAErC,IAAA,SAAS,YAAY,GAAA;AACjB,QAAA,IAAI,KAAK,GAAG,UAAU,EAAE;AACpB,YAAA,QAAQ,IAAI,CAAA,EAAG,MAAM,CAAA,GAAA,EAAM,SAAS,EAAE;AACjC,iBAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;AACtB,iBAAA,OAAO,CAAC,IAAI,EAAE,KAAK,CACxB,MAAM,CAAC;SACV;KACJ;AAED,IAAA,SAAS,YAAY,GAAA;AACjB,QAAA,IAAI,KAAK,GAAG,UAAU,EAAE;AACpB,YAAA,QAAQ,IAAI,CAAG,EAAA,MAAM,KAAK,SAAS,EAAE,KAAK,CAAC;SAC9C;KACJ;AAED,IAAA,SAAS,WAAW,GAAA;AAChB,QAAA,IAAI,KAAK,GAAG,UAAU,EAAE;AACpB,YAAA,QAAQ,IAAI,CAAA,EAAG,SAAS,EAAE,IAAI,CAAC;SAClC;KACJ;AAED,IAAA,SAAS,SAAS,GAAA;AACd,QAAA,OAAO,QAAQ;AACV,aAAA,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC;AACxB,aAAA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AACnB,aAAA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;KAC5B;AAED,IAAA,SAAS,SAAS,GAAA;AACd,QAAA,OAAO,QAAQ;AACV,aAAA,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC;AACxB,aAAA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;AACrB,aAAA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KAC9B;IAED,SAAS,cAAc,CAAC,CAAS,EAAA;AAC7B,QAAA,IAAI,CAAC,KAAK,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;AACnE,YAAA,YAAY,EAAE,CAAC;YACf,KAAK,IAAI,CAAC,CAAC;AACX,YAAA,eAAe,EAAE,CAAC;AAClB,YAAA,OAAO,IAAI,CAAC;SACf;AAAM,aAAA,IAAI,CAAC,KAAK,KAAK,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;AACrE,YAAA,YAAY,EAAE,CAAC;YACf,KAAK,IAAI,CAAC,CAAC;AACX,YAAA,gBAAgB,EAAE,CAAC;AACnB,YAAA,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,CAAC,KAAK,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,WAAW,EAAE;AAC3H,YAAA,YAAY,EAAE,CAAC;AACf,YAAA,KAAK,EAAE,CAAC;YACR,UAAU,GAAG,KAAK,CAAC;AACnB,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,KAAK,EAAE,CAAC;YACR,UAAU,GAAG,KAAK,CAAC;AACnB,YAAA,OAAO,IAAI,CAAC;SACf;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;AAED,IAAA,SAAS,UAAU,GAAA;AACf,QAAA,OAAO,KAAK,GAAG,MAAM,GAAG;YACpB,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACrC,YAAA,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE,CAEtB;iBAAM;AACH,gBAAA,KAAK,EAAE,CAAC;aACX;SACJ;AACD,QAAA,YAAY,EAAE,CAAC;KAClB;AAED,IAAA,SAAS,eAAe,GAAA;QACpB,UAAU,GAAG,KAAK,CAAC;AACnB,QAAA,IAAI,eAAe,GAAG,IAAI,CAAC;AAC3B,QAAA,OAAO,KAAK,GAAG,MAAM,GAAG;YACpB,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACrC,YAAA,IAAI,CAAC,KAAK,UAAU,EAAE;AAClB,gBAAA,KAAK,EAAE,CAAC;gBACR,eAAe,GAAG,IAAI,CAAC;aAC1B;AAAM,iBAAA,IAAI,eAAe,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;AAC3C,gBAAA,KAAK,EAAE,CAAC;aACX;AAAM,iBAAA,IAAI,eAAe,IAAI,CAAC,KAAK,UAAU,EAAE;gBAC5C,eAAe,GAAG,KAAK,CAAC;AACxB,gBAAA,WAAW,EAAE,CAAC;AACd,gBAAA,cAAc,EAAE,CAAC;aACpB;AAAM,iBAAA,IAAI,CAAC,KAAK,WAAW,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,WAAW,EAAE;AAC5E,gBAAA,WAAW,EAAE,CAAC;gBACd,KAAK,IAAI,CAAC,CAAC;gBACX,MAAM;aACT;iBAAM;AACH,gBAAA,KAAK,EAAE,CAAC;gBACR,eAAe,GAAG,KAAK,CAAC;aAC3B;SACJ;QACD,UAAU,GAAG,KAAK,CAAC;KACtB;AAED,IAAA,SAAS,cAAc,GAAA;QACnB,UAAU,GAAG,KAAK,CAAC;QACnB,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,QAAA,OAAO,KAAK,GAAG,MAAM,GAAG;YACpB,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACrC,YAAA,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE,CAEtB;AAAM,iBAAA,IAAI,CAAC,KAAK,WAAW,EAAE;AAC1B,gBAAA,KAAK,EAAE,CAAC;gBACR,cAAc,GAAG,IAAI,CAAC;aACzB;AAAM,iBAAA,IAAI,cAAc,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;AAC1C,gBAAA,KAAK,EAAE,CAAC;aACX;AAAM,iBAAA,IAAI,cAAc,IAAI,CAAC,KAAK,WAAW,EAAE;AAC5C,gBAAA,YAAY,EAAE,CAAC;gBACf,MAAM;aACT;iBAAM;AACH,gBAAA,KAAK,EAAE,CAAC;gBACR,cAAc,GAAG,KAAK,CAAC;aAC1B;SACJ;QACD,UAAU,GAAG,KAAK,CAAC;KACtB;AAED,IAAA,SAAS,gBAAgB,GAAA;QACrB,UAAU,GAAG,KAAK,CAAC;QACnB,IAAI,mBAAmB,GAAG,KAAK,CAAC;AAChC,QAAA,OAAO,KAAK,GAAG,MAAM,GAAG;YACpB,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACrC,YAAA,IAAI,CAAC,KAAK,WAAW,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,WAAW,EAAE;gBACrE,IAAI,mBAAmB,EAAE;AACrB,oBAAA,YAAY,EAAE,CAAC;iBAClB;gBACD,KAAK,IAAI,CAAC,CAAC;gBACX,MAAM;aACT;AAAM,iBAAA,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE;AACxB,gBAAA,KAAK,EAAE,CAAC;aACX;iBAAM;AACH,gBAAA,KAAK,EAAE,CAAC;gBACR,mBAAmB,GAAG,IAAI,CAAC;aAC9B;SACJ;QACD,UAAU,GAAG,KAAK,CAAC;KACtB;AAED,IAAA,UAAU,EAAE,CAAC;AACb,IAAA,QAAQ,IAAI,CAAA,OAAA,EAAU,MAAM,CAAA,CAAA,CAAG,CAAC;IAEhC,OAAO,CAAC,OAAiB,KAAI;QACzB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,UAAU,GAAG,EAAE,CAAC;AACtB,QAAA,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACxC,YAAA,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;AACrB,gBAAA,IAAI,EAAE,CAAC,IAAI,UAAU,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AAC9C,oBAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjB,SAAS,CAAC,IAAI,CAAE,OAAe,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvC;aACJ;SACJ;AACD,QAAA,IAAI;AACA,YAAA,OAAO,QAAQ,CAAC,GAAG,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACpE;QAAC,OAAO,KAAU,EAAE;AACjB,YAAA,KAAK,CAAC,OAAO,IAAI,CAAA,eAAA,EAAkB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAQ,KAAA,EAAA,QAAQ,KAAK,CAAC;AAC5E,YAAA,MAAM,KAAK,CAAC;SACf;AACL,KAAC,CAAC;AACN"}