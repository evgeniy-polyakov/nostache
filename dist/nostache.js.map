{"version":3,"file":"nostache.js","sources":["../src/index.ts"],"sourcesContent":["const templateCache: Record<string, string> = {};\r\n\r\nfunction parseTemplate(template: string) {\r\n\r\n    function charCode(char: string) {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    }\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const SEMICOLON = charCode(\";\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const QUOTE = charCode(\"'\");\r\n    const NEWLINE = charCode(\"\\n\");\r\n    const CARRIAGE_RETURN = charCode(\"\\r\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    function appendResult(endIndex = index, extra = \"\") {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield '${template.slice(startIndex, endIndex)}${extra}';\\n`;\r\n        }\r\n    }\r\n\r\n    function appendOutput() {\r\n        if (index > startIndex) {\r\n            funcBody += `yield ${template.slice(startIndex, index)};\\n`;\r\n        }\r\n    }\r\n\r\n    function appendLogic() {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    }\r\n\r\n    function parseOpenBlock(c: number) {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === ASSIGN && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Assignment block ={\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock();\r\n            return true;\r\n        } else if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === SEMICOLON && template.charCodeAt(index + 2) === CLOSE_ANGLE) {\r\n            // End of expression block <;>\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            index++;\r\n            appendLogic();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === NEWLINE) {\r\n            appendResult(index, \"\\\\n\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === CARRIAGE_RETURN && template.charCodeAt(index + 1) === NEWLINE) {\r\n            appendResult(index, \"\\\\n\");\r\n            index += 2;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // Escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === QUOTE) {\r\n            // Escape single quote '\r\n            appendResult(index, \"\\\\'\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if ((c === OPEN_ANGLE || c === ASSIGN) && template.charCodeAt(index + 1) === c && template.charCodeAt(index + 2) === OPEN_BRACE) {\r\n            // Escape open block symbols <<{ =={\r\n            index++;\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseLogicBlock() {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialHtml = true;\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseHtmlBlock() {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseOutputBlock() {\r\n        startIndex = index;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput();\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else if (isWhitespace[c]) {\r\n                index++;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    for (; index < length;) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n\r\n    return `return[...(function*(){\\n${funcBody}}).call(this)].join(\"\")`;\r\n}\r\n\r\nfunction Nostache(template: string): (context?: unknown) => string & {\r\n    verbose: boolean,\r\n    contextDecomposition: boolean,\r\n} {\r\n    const funcBody = templateCache[template] ?? (templateCache[template] = parseTemplate(template));\r\n\r\n    function templateFunc(context?: unknown) {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        const baseObject = {};\r\n        if (templateFunc.contextDecomposition && context && typeof context === \"object\" && !Array.isArray(context)) {\r\n            for (const p in context) {\r\n                if (!(p in baseObject) && /^[_a-z]\\w*$/i.test(p)) {\r\n                    argNames.push(p);\r\n                    argValues.push((context as any)[p]);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            if (templateFunc.verbose) {\r\n                console.log(`(function Nostache(${argNames.join(\", \")}) {\\n${funcBody}\\n})(`,\r\n                    ...argValues.reduce((a, t) => {\r\n                        if (a.length > 0) a.push(\",\");\r\n                        a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                        return a;\r\n                    }, []), \")\");\r\n            }\r\n            return Function(...argNames, funcBody).apply(context, argValues);\r\n        } catch (error: any) {\r\n            error.message += `\\nat (function (${argNames.join(\", \")}) {\\n${funcBody}\\n})(${\r\n                argValues.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    templateFunc.verbose = Nostache.verbose;\r\n    templateFunc.contextDecomposition = Nostache.contextDecomposition;\r\n\r\n    return templateFunc;\r\n}\r\n\r\nNostache.verbose = false;\r\nNostache.contextDecomposition = true;\r\n\r\nexport default Nostache;"],"names":[],"mappings":"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"}