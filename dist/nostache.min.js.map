{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["const templateCache: Record<string, string> = {};\r\n\r\nfunction parseTemplate(template: string) {\r\n\r\n    function charCode(char: string) {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    }\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const SEMICOLON = charCode(\";\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const QUOTE = charCode(\"'\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    const result = Nostache.resultVariable;\r\n    let funcBody = `let ${result}='';\\n`;\r\n\r\n    function appendResult(endIndex = index, extra = \"\") {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `${result}+='${template.slice(startIndex, endIndex)}${extra}';\\n`;\r\n        }\r\n    }\r\n\r\n    function appendOutput() {\r\n        if (index > startIndex) {\r\n            funcBody += `${result}+=${template.slice(startIndex, index)};\\n`;\r\n        }\r\n    }\r\n\r\n    function appendLogic() {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    }\r\n\r\n    function parseOpenBlock(c: number) {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === ASSIGN && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Assignment block ={\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock();\r\n            return true;\r\n        } else if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === SEMICOLON && template.charCodeAt(index + 2) === CLOSE_ANGLE) {\r\n            // End of expression block <;>\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            index++;\r\n            appendLogic();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // Escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === QUOTE) {\r\n            // Escape single quote '\r\n            appendResult(index, \"\\\\'\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if ((c === OPEN_ANGLE || c === ASSIGN) && template.charCodeAt(index + 1) === c && template.charCodeAt(index + 2) === OPEN_BRACE) {\r\n            // Escape open block symbols <<{ =={\r\n            index++;\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseLogicBlock() {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialHtml = true;\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseHtmlBlock() {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseOutputBlock() {\r\n        startIndex = index;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput();\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else if (isWhitespace[c]) {\r\n                index++;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    for (; index < length;) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    funcBody += `return ${result};`;\r\n\r\n    return funcBody;\r\n}\r\n\r\nfunction Nostache(template: string): (context?: unknown) => string & { verbose: boolean } {\r\n    const funcBody = templateCache[template] ?? (templateCache[template] = parseTemplate(template));\r\n\r\n    function templateFunc(context?: unknown) {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        const baseObject = {};\r\n        if (context && typeof context === \"object\") {\r\n            for (const p in context) {\r\n                if (!(p in baseObject) && /^[_a-z]\\w*$/i.test(p)) {\r\n                    argNames.push(p);\r\n                    argValues.push((context as any)[p]);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            if (Nostache.verbose || templateFunc.verbose) {\r\n                console.log(`(function Nostache(${argNames.join(\", \")}) {\\n${funcBody}\\n})(`,\r\n                    ...argValues.reduce((a, t) => {\r\n                        if (a.length > 0) a.push(\",\");\r\n                        a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                        return a;\r\n                    }, []), \")\");\r\n            }\r\n            return Function(...argNames, funcBody).apply(context, argValues);\r\n        } catch (error: any) {\r\n            error.message += `\\nat (function (${argNames.join(\", \")}) {\\n${funcBody}\\n})(${\r\n                argValues.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    templateFunc.verbose = false;\r\n\r\n    return templateFunc;\r\n}\r\n\r\nNostache.verbose = false;\r\nNostache.resultVariable = \"_\";\r\n\r\nexport default Nostache;"],"names":["templateCache","parseTemplate","template","charCode","char","length","map","i","charCodeAt","isWhitespace","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","SEMICOLON","ASSIGN","BACKSLASH","QUOTE","index","startIndex","result","Nostache","resultVariable","funcBody","appendResult","endIndex","extra","slice","appendOutput","appendLogic","parseOpenBlock","c","isPotentialHtml","parseHtmlBlock","parseLogicBlock","hasMeaningfulSymbol","parseOutputBlock","potentialEnd","_a","templateFunc","context","argNames","argValues","baseObject","p","test","push","verbose","console","log","join","reduce","a","t","Function","apply","error","message"],"mappings":"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"}