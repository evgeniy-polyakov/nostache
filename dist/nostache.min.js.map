{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["type TemplateFunction = ((...context: any[]) => Promise<string>) & {\r\n    verbose: boolean,\r\n    toString(): string,\r\n    escapeHtml(value: unknown): Promise<string>,\r\n    fetch(input: string | URL | Request, init?: RequestInit): Promise<TemplateFunction>;\r\n};\r\nconst templateCache: Record<string, TemplateFunction> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo support of older browsers\r\n// todo fix html escape in expressions like {@ a() <a></a> @} {= a() =}\r\n// todo output {=  =} or {~  ~} as whitespace `  `\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield in some cases\r\nconst parseTemplate = (template: string) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const isAlphabetic = (c: number) => c === 95 || (c >= 65 && c <= 90) || (c >= 97 && c <= 122);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= 48 && c <= 57);\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const OPEN_PARENTHESES = charCode(\"(\");\r\n    const CLOSE_PARENTHESES = charCode(\")\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const SLASH = charCode(\"/\");\r\n    const ASTERISK = charCode(\"*\");\r\n    const NEWLINE = charCode(\"\\n\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n    const AT_SIGN = charCode(\"@\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escapeHtml(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unsafe assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // Escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // Escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // Escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                isPotentialHtml = false;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseStringOrComment = () => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                isInComment = 0;\r\n                index++;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                isInComment = 0;\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = '';\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseFetchDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseFetchDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseFetchDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `(await this.fetch(${template.slice(startIndex, index)}))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = '';\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = '';\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace[c]) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(async function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace[c]) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(async function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst escapeHtml = async (value: unknown) => {\r\n    return String(await value).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`);\r\n};\r\n\r\nconst fetchTemplate = async (input: string | URL | Request, init?: RequestInit) => {\r\n    const response = await fetch(input, init);\r\n    return Nostache(await response.text());\r\n}\r\n\r\nconst iterateGenerator = async (generator: AsyncGenerator<any>) => {\r\n    let result = '';\r\n    while (true) {\r\n        const chunk = await generator.next();\r\n        if (chunk.done) {\r\n            break;\r\n        } else {\r\n            if (typeof chunk.value?.next === \"function\") {\r\n                result += await iterateGenerator(chunk.value);\r\n            } else {\r\n                result += await chunk.value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst Nostache = (template: string): TemplateFunction => {\r\n    if (templateCache[template]) {\r\n        return templateCache[template];\r\n    }\r\n    const funcBody = parseTemplate(template);\r\n    const templateFunc = async (...context: any[]) => {\r\n        try {\r\n            if (templateFunc.verbose) {\r\n                console.groupCollapsed(`(function () {`);\r\n                console.log(`${funcBody}})\\n(`, ...context.reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc = (...context: unknown[]) => {\r\n                return templateFunc(...context);\r\n            };\r\n            (contextFunc as any)[Symbol.iterator] = function* () {\r\n                yield* context;\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.fetch = templateFunc.fetch;\r\n            contextFunc.escapeHtml = templateFunc.escapeHtml;\r\n            contextFunc.toString = templateFunc.toString;\r\n            const generator = Function(funcBody).apply(contextFunc);\r\n            return iterateGenerator(generator);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function () {\\n${funcBody}\\n})(${\r\n                context.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    };\r\n    templateFunc.verbose = Nostache.verbose;\r\n    templateFunc.fetch = Nostache.fetch;\r\n    templateFunc.escapeHtml = escapeHtml;\r\n    templateFunc.toString = () => funcBody;\r\n    templateCache[template] = templateFunc;\r\n    return templateFunc;\r\n};\r\n\r\nNostache.verbose = false;\r\nNostache.fetch = fetchTemplate;\r\nNostache.escapeHtml = escapeHtml;\r\n\r\nexport default Nostache;"],"names":["templateCache","escapeHtml","async","value","String","replace","c","charCodeAt","iterateGenerator","generator","result","chunk","next","done","Nostache","template","funcBody","charCode","char","length","map","i","isWhitespace","isAlphabetic","isAlphanumeric","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","OPEN_PARENTHESES","CLOSE_PARENTHESES","ASSIGN","TILDE","SLASH","ASTERISK","NEWLINE","BACKSLASH","APOSTROPHE","QUOTE","BACKTICK","DOLLAR","AT_SIGN","index","startIndex","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","isInString","isInComment","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseFetchDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","templateFunc","context","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","fetch","toString","Function","apply","error","message","join","input","init","response","text"],"mappings":"yOAMA,MAAMA,EAAkD,CAAE,EA+apDC,EAAaC,MAAOC,GACfC,aAAaD,GAAOE,QAAQ,YAAYC,GAAK,KAAKA,EAAEC,WAAW,QAQpEC,EAAmBN,MAAOO,IAC5B,IAAIC,EAAS,GACb,OAAa,CACT,MAAMC,QAAcF,EAAUG,OAC9B,GAAID,EAAME,KACN,MAEiC,mBAAtBF,EAAMR,OAAOS,KACpBF,SAAgBF,EAAiBG,EAAMR,OAEvCO,SAAgBC,EAAMR,MAIlC,OAAOO,CAAM,EAGXI,EAAYC,IACd,GAAIf,EAAce,GACd,OAAOf,EAAce,GAEzB,MAAMC,EAncY,CAACD,IAEnB,MAAME,EAAYC,IACd,GAAIA,EAAKC,OAAS,EAAG,CACjB,MAAMC,EAA+B,CAAE,EACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKC,OAAQE,IAC7BD,EAAIF,EAAKX,WAAWc,KAAM,EAE9B,OAAOD,EAEX,OAAOF,EAAKX,WAAW,EAAE,EAGvBe,EAAeL,EAAS,WACxBM,EAAgBjB,GAAoB,KAANA,GAAaA,GAAK,IAAMA,GAAK,IAAQA,GAAK,IAAMA,GAAK,IACnFkB,EAAkBlB,GAAciB,EAAajB,IAAOA,GAAK,IAAMA,GAAK,GACpEmB,EAAaR,EAAS,KACtBS,EAAcT,EAAS,KACvBU,EAAaV,EAAS,KACtBW,EAAcX,EAAS,KACvBY,EAAmBZ,EAAS,KAC5Ba,EAAoBb,EAAS,KAC7Bc,EAASd,EAAS,KAClBe,EAAQf,EAAS,KACjBgB,EAAQhB,EAAS,KACjBiB,EAAWjB,EAAS,KACpBkB,EAAUlB,EAAS,MACnBmB,EAAYnB,EAAS,MACrBoB,EAAapB,EAAS,KACtBqB,EAAQrB,EAAS,KACjBsB,EAAWtB,EAAS,KACpBuB,EAASvB,EAAS,KAClBwB,EAAUxB,EAAS,KAEzB,IAAIyB,EAAQ,EACRC,EAAa,EACjB,MAAMxB,EAASJ,EAASI,OACxB,IAAIH,EAAW,GAEf,MAAM4B,EAAe,CAACC,EAAWH,EAAOI,EAAQ,OACxCD,EAAWF,GAAcG,KACzB9B,GAAY,WAAWD,EAASgC,MAAMJ,EAAYE,KAAYC,WAIhEE,EAAgBC,IACdP,EAAQC,IACR3B,GAAYiC,EACR,UAAUlC,EAASgC,MAAMJ,EAAYD,SACrC,yBAAyB3B,EAASgC,MAAMJ,EAAYD,WAI1DQ,EAAc,KACZR,EAAQC,IACR3B,GAAY,GAAGD,EAASgC,MAAMJ,EAAYD,OAI5CS,EAAkB7C,IACpB,MAAM8C,EAAIrC,EAASR,WAAWmC,EAAQ,GACtC,OAAIpC,IAAMmB,GAAc2B,IAAMzB,GAE1BiB,IACAF,GAAS,EACTW,KACO,GACA/C,IAAMqB,GAAcyB,IAAMrB,GAEjCa,IACAF,GAAS,EACTY,GAAiB,IACV,GACAhD,IAAMqB,GAAcyB,IAAMpB,GAEjCY,IACAF,GAAS,EACTY,GAAiB,IACV,GACAhD,IAAMqB,GAAcyB,IAAMX,GAEjCG,IACAF,GAAS,EACTa,KACO,GACAjD,IAAM8B,GAEbQ,EAAaF,EAAO,QACpBA,IACAC,EAAaD,GACN,GACApC,IAAMiC,GAEbK,EAAaF,EAAO,OACpBA,IACAC,EAAaD,GACN,GACApC,IAAMkC,IAEbI,EAAaF,EAAO,OACpBA,IACAC,EAAaD,GACN,EAEC,EAGVW,EAAkB,KACpBV,EAAaD,EACb,IAAIc,GAAkB,EACtB,KAAOd,EAAQvB,GAAQ,CACnB,GAAIsC,IAAwB,CACxBD,GAAkB,EAClB,SAEJ,MAAMlD,EAAIS,EAASR,WAAWmC,GAC9B,GAAIpC,IAAMqB,EAAY,CAClBe,IACA,MAAMU,EAAIrC,EAASR,WAAWmC,GAC1BU,IAAM1B,GACN8B,GAAkB,EAClBN,IACAR,IACAgB,KACON,IAAMrB,GAAUqB,IAAMpB,GAC7BwB,GAAkB,EAClBN,IACAR,IACAY,EAAiBF,IAAMpB,GACvBW,KACOS,IAAMX,GACbe,GAAkB,EAClBd,IACAQ,IACAR,GAAS,EACTa,KAEAC,GAAkB,OAEnB,GAAIA,GAAmBlC,EAAahB,GACvCoC,SACG,GAAIc,GAAmBlD,IAAMmB,EAChC+B,GAAkB,EAClBN,IACAS,QACG,IAAIrD,IAAMsB,GAAeb,EAASR,WAAWmC,EAAQ,KAAOhB,EAAa,CAC5EwB,IACAR,GAAS,EACT,MAEAA,IACAc,GAAkB,GAG1Bb,EAAaD,CAAK,EAGhBiB,EAAiB,KACnBhB,EAAaD,EACb,IAAIkB,GAAiB,EACrB,KAAOlB,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC9B,GAAIpC,IAAMoB,EACNgB,IACAkB,EAAelB,OACZ,GAAIkB,GAAgB,GAAKtC,EAAahB,GACzCoC,QACG,IAAIkB,GAAgB,GAAKtD,IAAMsB,EAAa,CAC/CgB,EAAagB,GACb,MACOT,EAAe7C,KAGtBoC,IACAkB,GAAiB,IAGzBjB,EAAaD,CAAK,EAGhBgB,EAAiB,KACnBf,EAAaD,EACb,IAAIkB,GAAiB,EACjBC,GAA2B,EAC3BC,GAAsB,EAC1B,KAAOpB,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC9B,IAAKoB,GAAuBxC,EAAahB,GACrCqC,IACAD,SACG,GAAIoB,IAAwBxD,IAAMmB,GAAcH,EAAahB,IAC5DuD,EAAyB,IAAGA,EAAyBnB,GACrDpC,IAAMmB,IAAYmC,EAAelB,GACrCA,SACG,GAAIkB,GAAgB,GAAKtC,EAAahB,GACzCoC,QACG,IAAIkB,GAAgB,GAAKtD,IAAMsB,EAAa,CAC/CgB,EAAaiB,GACb,MACOV,EAAe7C,KAGtBoC,IACAkB,GAAiB,EACjBC,GAA2B,GAJ3BC,GAAsB,GAQ9BnB,EAAaD,CAAK,EAGhBY,EAAoBL,IACtBN,EAAaD,EACb,MAAMqB,EAAYd,EAASjB,EAAQD,EACnC,IAAI+B,GAAsB,EAC1B,KAAOpB,EAAQvB,GAAQ,CACnB,GAAIsC,IAAwB,CACxBK,GAAsB,EACtB,SAEJ,MAAMxD,EAAIS,EAASR,WAAWmC,GAC9B,IAAKoB,GAAuBxC,EAAahB,GACrCoC,QACG,IAAIpC,IAAMyD,GAAahD,EAASR,WAAWmC,EAAQ,KAAOd,EAAa,CACtEkC,GACAd,EAAaC,GAEjBP,GAAS,EACT,MAEAA,IACAoB,GAAsB,GAG9BnB,EAAaD,CAAK,EAGhBe,EAAuB,KACzB,IAAIO,EAAa,EACbC,EAAc,EACdvD,GAAS,EACb,KAAOgC,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC9B,IAAIU,EAAI,EACR,GAAKY,GAAeC,GAAgB3D,IAAM+B,GAAc/B,IAAMgC,GAAShC,IAAMiC,EAItE,GAAIyB,GAAc1D,IAAM8B,EAC3BM,GAAS,MACN,IAAIsB,GAAc1D,IAAM0D,EAG3B,OAFAA,EAAa,EACbtB,KACO,EACJ,GAAKsB,GAAeC,GAAe3D,IAAM2B,IAAWmB,EAAIrC,EAASR,WAAWmC,EAAQ,MAAQT,GAASmB,IAAMlB,EAI3G,GAAI+B,IAAgBhC,GAAS3B,IAAM6B,EACtC8B,EAAc,EACdvB,QACG,IAAIuB,IAAgB/B,GAAY5B,IAAM4B,GAAYnB,EAASR,WAAWmC,EAAQ,KAAOT,EAGxF,OAFAgC,EAAc,EACdvB,GAAS,GACF,EACJ,IAAIuB,IAAeD,EAGtB,OAAO,EAFPtB,SAXAuB,EAAcb,EACdV,GAAS,EACThC,GAAS,OAZTsD,EAAa1D,EACboC,IACAhC,GAAS,EAwBjB,OAAOA,CAAM,EAGX6C,EAAmB,KACrBZ,EAAaD,EACb,IAAIwB,EAAY,EACZC,GAAgB,EAChBC,EAAO,GACX,KAAO1B,EAAQvB,GAAQ,CACnB,IAAIb,EAAIS,EAASR,WAAWmC,GAC5B,GAAKwB,EAmBE,KAAIC,IAAiB3C,EAAelB,GAEpC,IAAI6D,IAAkB3C,EAAelB,GAAI,CAG5C,GAFA8D,EAAOrD,EAASgC,MAAMJ,EAAYD,GAClCpC,EAAI+D,EAAe/D,GACfA,IAAMuB,EAAkB,CACxBa,IACA4B,EAAyBF,GACzB,MACG,GAAI9D,IAAM+B,GAAc/B,IAAMgC,GAAShC,IAAMiC,EAAU,CAC1DI,EAAaD,EACbA,IACA6B,EAAsBH,GACtB,MAEAI,IACA,MAGJA,IACA,MAnBA9B,QApBY,CAIZ,GAHApC,EAAI+D,EAAe/D,GACnBqC,EAAaD,EACbwB,EAAY5D,EACRA,IAAMuB,EAAkB,CACxBa,IACA4B,IACA,MACG,GAAIhE,IAAM+B,GAAc/B,IAAMgC,GAAShC,IAAMiC,EAAU,CAC1DG,IACA6B,IACA,MACG,IAAIhD,EAAa2C,GAGjB,CACHM,IACA,MAJA9B,IACAyB,GAAgB,GA4B5BE,EAAetD,EAASR,WAAWmC,IACnCC,EAAaD,CAAK,EAGhB8B,EAA6B,KAC/B,KAAO9B,EAAQvB,GAAQ,CACnB,GAAIJ,EAASR,WAAWmC,KAAWD,GAAW1B,EAASR,WAAWmC,EAAQ,KAAOd,GAAec,EAAQC,EAAY,CAChH3B,GAAY,OAAOD,EAASgC,MAAMJ,EAAYD,cAC9CA,GAAS,EACT,MAEAA,MAKN6B,EAAyBH,IAC3B,KAAO1B,EAAQvB,GAAQ,CACnB,GAAIJ,EAASR,WAAWmC,KAAWD,GAAW1B,EAASR,WAAWmC,EAAQ,KAAOd,GAAec,EAAQC,EAAY,CAC5GyB,IAAMpD,GAAY,OAAOoD,MAC7BpD,GAAY,qBAAqBD,EAASgC,MAAMJ,EAAYD,SAC5DA,GAAS,EACT,MAEAA,MAKN4B,EAA4BF,IAC9BzB,EAAaD,EACb,IAAI+B,EAAa,GACbC,EAAc,EAClB,KAAOhC,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC9B,GAAIpC,IAAMuB,EACN6C,SACG,GAAIpE,IAAMwB,EAAmB,CAChC,IAAI4C,EAGG,CACHD,EAAa1D,EAASgC,MAAMJ,EAAYD,GACxCA,IACA2B,EAAetD,EAASR,WAAWmC,IACnCC,EAAaD,EACb,MAPAgC,IACAhC,SASJA,IAGR,MAAMiC,EAAe3D,EACrB,IAAI4D,GAAmB,EAEvB,IADA5D,EAAW,GACJ0B,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC9B,GAAIpB,EAAahB,GACbsE,EAAiBlC,EACjBA,QACG,IAAIpC,IAAMmC,GAAW1B,EAASR,WAAWmC,EAAQ,KAAOd,EAAa,CACxEgB,EAAagC,KAAsBA,EAAiBlC,GACpD,MAAMmC,EAAgB7D,EACtBA,EAAW2D,EACPP,IACApD,GAAY,OAAOoD,MAEvBpD,GAAY,oBAAoByD,MAAeI,mBAC/CnC,GAAS,EACT,MACOS,EAAe7C,IAGtBoC,OAKN2B,EAAkB/D,IACpB,KAAOoC,EAAQvB,GAAUG,EAAahB,IAClCoC,IACApC,EAAIS,EAASR,WAAWmC,GAE5B,OAAOpC,CAAC,EAGZ,KAAOoC,EAAQvB,GAAQ,CACnB,MAAMb,EAAIS,EAASR,WAAWmC,GAC1BS,EAAe7C,IAGfoC,IAIR,OADAE,IACO,8BAA8B5B,gBAAuB,EAiC3C8D,CAAc/D,GACzBgE,EAAe7E,SAAU8E,KAC3B,IACQD,EAAaE,UACbC,QAAQC,eAAe,kBACvBD,QAAQE,IAAI,GAAGpE,YAAoBgE,EAAQK,QAAO,CAACC,EAAGC,KAC9CD,EAAEnE,OAAS,GAAGmE,EAAEE,KAAK,KACzBF,EAAEE,KAAkB,iBAAND,EAAiB,IAAIA,KAAOA,GACnCD,IACR,IAAK,KACRJ,QAAQO,YAEZ,MAAMC,EAAc,IAAIV,IACbD,KAAgBC,GAE1BU,EAAoBC,OAAOC,UAAY,kBAC7BZ,CACV,EACD,IAAK,IAAI3D,EAAI,EAAGA,EAAI2D,EAAQ7D,OAAQE,IAC/BqE,EAAoBrE,GAAK2D,EAAQ3D,GAEtCqE,EAAYG,MAAQd,EAAac,MACjCH,EAAYzF,WAAa8E,EAAa9E,WACtCyF,EAAYI,SAAWf,EAAae,SACpC,MAAMrF,EAAYsF,SAAS/E,GAAUgF,MAAMN,GAC3C,OAAOlF,EAAiBC,GAC1B,MAAOwF,GAIL,MAHAA,EAAMC,SAAW,uBAAuBlF,SACpCgE,EAAQ5D,KAAImE,GAAkB,iBAANA,EAAiB,IAAIA,KAAOA,IAAGY,KAAK,SAE1DF,IAQd,OALAlB,EAAaE,QAAUnE,EAASmE,QAChCF,EAAac,MAAQ/E,EAAS+E,MAC9Bd,EAAa9E,WAAaA,EAC1B8E,EAAae,SAAW,IAAM9E,EAC9BhB,EAAce,GAAYgE,EACnBA,CAAY,EAKS,OAFhCjE,EAASmE,SAAU,EACnBnE,EAAS+E,MApEa3F,MAAOkG,EAA+BC,KACxD,MAAMC,QAAiBT,MAAMO,EAAOC,GACpC,OAAOvF,QAAewF,EAASC,OAAO,EAmE1CzF,EAASb,WAAaA,EAAUa,CAAA"}