{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["export type ContextFunction<TArgument, TExtensions extends Record<string, unknown> = Record<string, unknown>, TExtensionName extends keyof TExtensions = keyof TExtensions> = {\r\n    (this: ContextFunction<TArgument, TExtensions, TExtensionName>, ...args: TArgument[]): Promise<string>,\r\n    [arg: number]: TArgument,\r\n} & Iterable<TArgument> & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): TemplateFunction;\r\n} & {\r\n    [name in TExtensionName]: TExtensions[TExtensionName];\r\n};\r\nexport type TemplateFunction = {\r\n    <TArgument>(...args: TArgument[]): Promise<string>;\r\n    toString(): string;\r\n};\r\nexport type TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    cache?: boolean;\r\n    load?(input: string | URL | Request, init?: RequestInit): string | Promise<string>;\r\n    escape?(value: string): string | Promise<string>;\r\n    extensions: Record<string, unknown>;\r\n};\r\nexport type TemplateCache = Map<string, string | TemplateFunction>;\r\nconst templateCache: TemplateCache = new Map<string, string | TemplateFunction>();\r\n\r\n// todo tests for comments everywhere\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const WHITESPACE = \" \".charCodeAt(0);\r\n    const TAB = \"\\t\".charCodeAt(0);\r\n    const RETURN = \"\\r\".charCodeAt(0);\r\n    const NEWLINE = \"\\n\".charCodeAt(0);\r\n    const UNDERSCORE = \"_\".charCodeAt(0);\r\n    const LOWERCASE_A = \"a\".charCodeAt(0);\r\n    const LOWERCASE_Z = \"z\".charCodeAt(0);\r\n    const UPPERCASE_A = \"A\".charCodeAt(0);\r\n    const UPPERCASE_Z = \"Z\".charCodeAt(0);\r\n    const NUMBER_0 = \"0\".charCodeAt(0);\r\n    const NUMBER_9 = \"9\".charCodeAt(0);\r\n    const OPEN_ANGLE = \"<\".charCodeAt(0);\r\n    const CLOSE_ANGLE = \">\".charCodeAt(0);\r\n    const OPEN_BRACE = \"{\".charCodeAt(0);\r\n    const CLOSE_BRACE = \"}\".charCodeAt(0);\r\n    const OPEN_PARENTHESES = \"(\".charCodeAt(0);\r\n    const CLOSE_PARENTHESES = \")\".charCodeAt(0);\r\n    const ASSIGN = \"=\".charCodeAt(0);\r\n    const TILDE = \"~\".charCodeAt(0);\r\n    const SLASH = \"/\".charCodeAt(0);\r\n    const ASTERISK = \"*\".charCodeAt(0);\r\n    const BACKSLASH = \"\\\\\".charCodeAt(0);\r\n    const APOSTROPHE = \"'\".charCodeAt(0);\r\n    const QUOTE = \"\\\"\".charCodeAt(0);\r\n    const BACKTICK = \"`\".charCodeAt(0);\r\n    const DOLLAR = \"$\".charCodeAt(0);\r\n    const AT_SIGN = \"@\".charCodeAt(0);\r\n    const isWhitespace = (c: number) => c === WHITESPACE || c === TAB || c === RETURN || c === NEWLINE;\r\n    const isAlphabetic = (c: number) => c === UNDERSCORE || (c >= LOWERCASE_A && c <= LOWERCASE_Z) || (c >= UPPERCASE_A && c <= UPPERCASE_Z);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= NUMBER_0 && c <= NUMBER_9);\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += template.slice(startIndex, index);\r\n        }\r\n    };\r\n\r\n    const throwEndOfBlockExpected = (block: string) => {\r\n        throw new SyntaxError(`Expected end of ${block} at\\n${template}`);\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace(c)) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"logic block }>\");\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                startIndex = index;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"html block >}\");\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n            } else if (c === OPEN_ANGLE || isWhitespace(c)) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendResult(potentialEndWhitespace);\r\n                }\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"text block <}\");\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                // todo true only if string\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                } else {\r\n                    funcBody += `yield \\`${template.slice(startIndex, index)}\\`;`;\r\n                }\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(`output block ${unsafe ? \"~}\" : \"=}\"}`);\r\n    };\r\n\r\n    const parseStringOrComment = (onlyComment = false) => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!onlyComment && !isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                index++;\r\n                return true;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        if (result && isInString) {\r\n            throwEndOfBlockExpected(`string ${String.fromCharCode(isInString)}`);\r\n        }\r\n        if (result && isInComment === ASTERISK) {\r\n            throwEndOfBlockExpected(`comment */`);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseLoadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                    index += 2;\r\n                    startIndex = index;\r\n                    return;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseLoadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseLoadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace(c)) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace(c)) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (value && typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst Nostache: {\r\n    (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction;\r\n    readonly options: TemplateOptions,\r\n    readonly cache: TemplateCache,\r\n} = ((template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options\r\n    };\r\n    const extensions = {\r\n        ...(Nostache.options ? Nostache.options.extensions : undefined),\r\n        ...(options ? options.extensions : undefined)\r\n    };\r\n    const escape = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            typeof options.escape === \"function\" ? options.escape :\r\n                (s => s === undefined || s === null ? \"\" : String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const load = (input: string | URL | Request, init?: RequestInit) => (...args: unknown[]): Promise<string> => {\r\n        const inputString = typeof input === \"string\" ? input : input instanceof URL ? input.toString() : \"\";\r\n        let cachedTemplate = inputString ? templateCache.get(inputString) : undefined;\r\n        if (cachedTemplate && typeof cachedTemplate !== \"string\") {\r\n            cachedTemplate = undefined;\r\n        }\r\n        return Nostache(new Promise<string>(r => r(\r\n            cachedTemplate ? cachedTemplate :\r\n                typeof options.load === \"function\" ? options.load(input, init) :\r\n                    fetch(input, init).then(r => r.text()))\r\n        ).then(template => {\r\n                if (!cachedTemplate && options.cache !== false) {\r\n                    templateCache.set(inputString, template);\r\n                }\r\n                return template;\r\n            }\r\n        ), options)(...args);\r\n    };\r\n    const returnFunc = (...args: unknown[]): Promise<string> =>\r\n        new Promise<string>(r => r(template))\r\n            .then((templateString: string) => {\r\n                const cacheKey = options.async ? `async ${templateString}` : templateString;\r\n                let templateFunc = templateCache.get(cacheKey);\r\n                const templateFuncBody = templateFunc ? templateFunc.toString() : parseTemplate(templateString, options);\r\n                returnFunc.toString = () => `function () {\\n${templateFuncBody}\\n}`;\r\n                try {\r\n                    if (!templateFunc || typeof templateFunc === \"string\") {\r\n                        templateFunc = Function(templateFuncBody) as TemplateFunction;\r\n                        templateFunc.toString = () => templateFuncBody;\r\n                        if (options.cache !== false) {\r\n                            templateCache.set(cacheKey, templateFunc);\r\n                        }\r\n                    }\r\n                    if (options.verbose) {\r\n                        console.groupCollapsed(`(function () {`);\r\n                        console.log(`${templateFuncBody}})\\n(`, ...(args as any[]).reduce((a, t) => {\r\n                            if (a.length > 0) a.push(\",\");\r\n                            a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                            return a;\r\n                        }, []), \")\")\r\n                        console.groupEnd();\r\n                    }\r\n                    const contextFunc = ((...args: unknown[]) => returnFunc(...args)) as ContextFunction<unknown>;\r\n                    contextFunc[Symbol.iterator] = function* () {\r\n                        yield* args;\r\n                    };\r\n                    for (let i = 0; i < args.length; i++) {\r\n                        contextFunc[i] = args[i];\r\n                    }\r\n                    contextFunc.load = load;\r\n                    contextFunc.escape = escape;\r\n                    for (const name in extensions) {\r\n                        contextFunc[name] = extensions[name];\r\n                    }\r\n                    return iterateRecursively(templateFunc.apply(contextFunc));\r\n                } catch (error: any) {\r\n                    error.message += `\\nat function () {\\n${templateFuncBody}\\n})(${\r\n                        args.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n                    })`;\r\n                    throw error;\r\n                }\r\n            });\r\n    return returnFunc;\r\n}) as typeof Nostache;\r\n\r\n(Nostache as { options: TemplateOptions }).options = {} as TemplateOptions;\r\n(Nostache as { cache: TemplateCache }).cache = templateCache;\r\n\r\nexport default Nostache;"],"names":["g","f","exports","module","define","amd","globalThis","self","Nostache","this","templateCache","Map","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","template","options","extensions","Object","assign","undefined","escape","String","replace","c","charCodeAt","load","input","init","args","inputString","URL","toString","cachedTemplate","get","fetch","text","cache","set","returnFunc","templateString","cacheKey","async","templateFunc","templateFuncBody","isWhitespace","isAlphabetic","isAlphanumeric","index","startIndex","length","funcBody","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","throwEndOfBlockExpected","block","SyntaxError","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","onlyComment","isInString","isInComment","fromCharCode","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseLoadDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","Function","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","i","apply","error","message","map","join"],"mappings":"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"}