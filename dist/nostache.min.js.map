{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["type TemplateFunction = (this: TemplateFunction & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): TemplateFunction;\r\n}, ...context: any[]) => Promise<string>;\r\ntype TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    load?(input: string | URL | Request, init?: RequestInit): string | Promise<string>;\r\n    escape?(value: string): string;\r\n};\r\nconst templateCache: Record<string, TemplateFunction> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo cache tests, cache clear function\r\n// todo options tests, make sure options are not stored in cache\r\n// todo default template options\r\n// todo output {=  =} or {~  ~} as whitespace `  `\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield in some cases\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const isAlphabetic = (c: number) => c === 95 || (c >= 65 && c <= 90) || (c >= 97 && c <= 122);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= 48 && c <= 57);\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const OPEN_PARENTHESES = charCode(\"(\");\r\n    const CLOSE_PARENTHESES = charCode(\")\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const SLASH = charCode(\"/\");\r\n    const ASTERISK = charCode(\"*\");\r\n    const NEWLINE = charCode(\"\\n\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n    const AT_SIGN = charCode(\"@\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unescape: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unescape ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                isPotentialHtml = false;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unescape: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unescape ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unescape);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseStringOrComment = () => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                isInComment = 0;\r\n                index++;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                isInComment = 0;\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseloadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseloadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseloadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace[c]) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace[c]) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst Nostache = (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options,\r\n    };\r\n    const escape = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            typeof options.escape === \"function\" ? options.escape :\r\n                (s => String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const load = (input: string | URL | Request, init?: RequestInit) => {\r\n        return Nostache(typeof options.load === \"function\" ? options.load(input, init) : fetch(input, init).then(r => r.text()));\r\n    };\r\n    const templateFunc = (...context: unknown[]) => new Promise<string>(r => r(template)).then((templateString: string) => {\r\n        const key = options.async ? `async ${templateString}` : templateString;\r\n        let func = templateCache[key];\r\n        const funcBody = func ? func.toString() : parseTemplate(templateString, options);\r\n        try {\r\n            if (!func) {\r\n                func = Function(funcBody) as TemplateFunction;\r\n                func.toString = () => funcBody;\r\n                templateCache[key] = func;\r\n            }\r\n            if (options.verbose) {\r\n                console.groupCollapsed(`(function () {`);\r\n                console.log(`${funcBody}})\\n(`, ...(context as any[]).reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc: ThisParameterType<TemplateFunction> = (...context: unknown[]) => templateFunc(...context);\r\n            (contextFunc as any)[Symbol.iterator] = function* () {\r\n                yield* context;\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.load = load;\r\n            contextFunc.escape = escape;\r\n            return iterateRecursively(func.apply(contextFunc));\r\n        } catch (error: any) {\r\n            error.message += `\\nat function () {\\n${funcBody}\\n})(${\r\n                context.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    });\r\n    return templateFunc;\r\n};\r\n\r\nNostache.options = {} as TemplateOptions;\r\n\r\nexport default Nostache;"],"names":["templateCache","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","Nostache","template","options","escape","String","replace","c","charCodeAt","load","input","init","fetch","text","templateFunc","context","templateString","key","async","func","funcBody","toString","charCode","char","length","map","i","isWhitespace","isAlphabetic","isAlphanumeric","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","OPEN_PARENTHESES","CLOSE_PARENTHESES","ASSIGN","TILDE","SLASH","ASTERISK","NEWLINE","BACKSLASH","APOSTROPHE","QUOTE","BACKTICK","DOLLAR","AT_SIGN","index","startIndex","appendResult","endIndex","extra","slice","appendOutput","unescape","appendLogic","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","isInString","isInComment","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseloadDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","Function","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","apply","error","message","join"],"mappings":"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"}