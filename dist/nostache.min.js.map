{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["function charCode(char: string) {\r\n    if (char.length > 1) {\r\n        const map: Record<number, boolean> = {};\r\n        for (let i = 0; i < char.length; i++) {\r\n            map[char.charCodeAt(i)] = true;\r\n        }\r\n        return map;\r\n    }\r\n    return char.charCodeAt(0);\r\n}\r\n\r\nconst isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\nconst OPEN_ANGLE = charCode(\"<\");\r\nconst CLOSE_ANGLE = charCode(\">\");\r\nconst OPEN_BRACE = charCode(\"{\");\r\nconst CLOSE_BRACE = charCode(\"}\");\r\nconst SEMICOLON = charCode(\";\");\r\nconst EQUAL = charCode(\"=\");\r\n\r\nexport default function Nostache(template: string): (context?: unknown) => string {\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    const result = \"__var__\";\r\n    let funcBody = `let ${result}='';\\n`;\r\n\r\n    function appendResult(endIndex: number = index) {\r\n        if (endIndex > startIndex) {\r\n            funcBody += `${result}+='${template.slice(startIndex, endIndex)}';\\n`;\r\n        }\r\n    }\r\n\r\n    function appendOutput() {\r\n        if (index > startIndex) {\r\n            funcBody += `${result}+=${template.slice(startIndex, index)};\\n`;\r\n        }\r\n    }\r\n\r\n    function appendLogic() {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}\\n`;\r\n        }\r\n    }\r\n\r\n    function parseOpenBlock(c: number) {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === EQUAL && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock();\r\n            return true;\r\n        } else if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === SEMICOLON && template.charCodeAt(index + 2) === CLOSE_ANGLE) {\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            index++;\r\n            appendLogic();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseStart() {\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // no action\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        appendResult();\r\n    }\r\n\r\n    function parseLogicBlock() {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialHtml = true;\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseHtmlBlock() {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // no action\r\n            } else if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseOutputBlock() {\r\n        startIndex = index;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput();\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else if (isWhitespace[c]) {\r\n                index++;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    parseStart();\r\n    funcBody += `return ${result};`;\r\n\r\n    return (context?: unknown) => {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        const baseObject = {};\r\n        if (context && typeof context === \"object\") {\r\n            for (const p in context) {\r\n                if (!(p in baseObject) && /^[_a-z]\\w*$/i.test(p)) {\r\n                    argNames.push(p);\r\n                    argValues.push((context as any)[p]);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            return Function(...argNames, funcBody).apply(context, argValues);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function (${argNames.join(\", \")}) {\\n${funcBody}\\n}`;\r\n            throw error;\r\n        }\r\n    };\r\n}"],"names":["charCode","char","length","map","i","charCodeAt","isWhitespace","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","SEMICOLON","EQUAL","template","index","startIndex","result","funcBody","appendResult","endIndex","slice","appendOutput","appendLogic","parseOpenBlock","c","isPotentialHtml","parseHtmlBlock","parseLogicBlock","hasMeaningfulSymbol","parseOutputBlock","potentialEnd","parseStart","context","argNames","argValues","baseObject","p","test","push","Function","apply","error","message","join"],"mappings":"yOAAA,SAASA,EAASC,GACd,GAAIA,EAAKC,OAAS,EAAG,CACjB,MAAMC,EAA+B,CAAA,EACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKC,OAAQE,IAC7BD,EAAIF,EAAKI,WAAWD,KAAM,EAE9B,OAAOD,CACV,CACD,OAAOF,EAAKI,WAAW,EAC3B,CAEA,MAAMC,EAAeN,EAAS,WACxBO,EAAaP,EAAS,KACtBQ,EAAcR,EAAS,KACvBS,EAAaT,EAAS,KACtBU,EAAcV,EAAS,KACvBW,EAAYX,EAAS,KACrBY,EAAQZ,EAAS,KA4JvB,OA1JwB,SAASa,GAE7B,IAAIC,EAAQ,EACRC,EAAa,EACjB,MAAMb,EAASW,EAASX,OAClBc,EAAS,UACf,IAAIC,EAAW,OAAOD,UAEtB,SAASE,EAAaC,EAAmBL,GACjCK,EAAWJ,IACXE,GAAY,GAAGD,OAAYH,EAASO,MAAML,EAAYI,SAE7D,CAED,SAASE,IACDP,EAAQC,IACRE,GAAY,GAAGD,MAAWH,EAASO,MAAML,EAAYD,QAE5D,CAED,SAASQ,IACDR,EAAQC,IACRE,GAAY,GAAGJ,EAASO,MAAML,EAAYD,OAEjD,CAED,SAASS,EAAeC,GACpB,OAAIA,IAAMjB,GAAcM,EAASR,WAAWS,EAAQ,KAAOL,GACvDS,IACAJ,GAAS,EAiCjB,WACIC,EAAaD,EACb,IAAIW,GAAkB,EACtB,KAAOX,EAAQZ,GAAS,CACpB,MAAMsB,EAAIX,EAASR,WAAWS,GAC9B,GAAIU,IAAMf,EACNK,IACAW,GAAkB,OACf,GAAIA,GAAmBnB,EAAakB,GACvCV,SACG,GAAIW,GAAmBD,IAAMjB,EAChCkB,GAAkB,EAClBH,IACAI,QACG,IAAIF,IAAMd,GAAeG,EAASR,WAAWS,EAAQ,KAAON,EAAa,CAC5Ec,IACAR,GAAS,EACT,KACH,CACGA,IACAW,GAAkB,CACrB,CACJ,CACDV,EAAaD,CAChB,CAxDOa,IACO,GACAH,IAAMZ,GAASC,EAASR,WAAWS,EAAQ,KAAOL,GACzDS,IACAJ,GAAS,EA6EjB,WACIC,EAAaD,EACb,IAAIc,GAAsB,EAC1B,KAAOd,EAAQZ,GAAS,CACpB,MAAMsB,EAAIX,EAASR,WAAWS,GAC9B,GAAIU,IAAMd,GAAeG,EAASR,WAAWS,EAAQ,KAAON,EAAa,CACjEoB,GACAP,IAEJP,GAAS,EACT,KACH,CAAUR,EAAakB,GACpBV,KAEAA,IACAc,GAAsB,EAE7B,CACDb,EAAaD,CAChB,CA/FOe,IACO,GACAL,IAAMjB,GAAcM,EAASR,WAAWS,EAAQ,KAAOH,GAAaE,EAASR,WAAWS,EAAQ,KAAON,IAC9GU,IACAJ,IACAC,EAAaD,EACbA,IACAQ,IACAR,IACAC,EAAaD,GACN,EAGd,CAwCD,SAASY,IACLX,EAAaD,EACb,IAAIgB,GAAgB,EACpB,KAAOhB,EAAQZ,GAAS,CACpB,MAAMsB,EAAIX,EAASR,WAAWS,GAC9B,GAAIS,EAAeC,SAEZ,GAAIA,IAAMhB,EACbM,IACAgB,EAAehB,OACZ,GAAIgB,GAAgB,GAAKxB,EAAakB,GACzCV,QACG,IAAIgB,GAAgBN,IAAMd,EAAa,CAC1CQ,EAAaY,GACb,KACH,CACGhB,IACAgB,GAAgB,CACnB,CACJ,CACDf,EAAaD,CAChB,CA0BD,OArFA,WACI,KAAOA,EAAQZ,GAAS,CAEhBqB,EADMV,EAASR,WAAWS,KAI1BA,GAEP,CACDI,GACH,CAwEDa,GACAd,GAAY,UAAUD,KAEdgB,IACJ,MAAMC,EAAW,GACXC,EAAY,GACZC,EAAa,CAAA,EACnB,GAAIH,GAA8B,iBAAZA,EAClB,IAAK,MAAMI,KAAKJ,IACNI,KAAKD,IAAe,eAAeE,KAAKD,KAC1CH,EAASK,KAAKF,GACdF,EAAUI,KAAMN,EAAgBI,KAI5C,IACI,OAAOG,YAAYN,EAAUhB,GAAUuB,MAAMR,EAASE,EACzD,CAAC,MAAOO,GAEL,MADAA,EAAMC,SAAW,kBAAkBT,EAASU,KAAK,aAAa1B,OACxDwB,CACT,EAET,CAAA"}