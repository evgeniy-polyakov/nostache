{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["export type ContextFunction<TArgument, TExtensions extends Record<string, unknown> = Record<string, unknown>, TExtensionName extends keyof TExtensions = keyof TExtensions> = {\r\n    (this: ContextFunction<TArgument, TExtensions, TExtensionName>, ...args: TArgument[]): Promise<string>,\r\n    [arg: number]: TArgument,\r\n} & Iterable<TArgument> & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): TemplateFunction;\r\n} & {\r\n    [name in TExtensionName]: TExtensions[TExtensionName];\r\n};\r\nexport type TemplateFunction = {\r\n    <TArgument>(...args: TArgument[]): Promise<string>;\r\n    toString(): string;\r\n};\r\nexport type TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    cache?: boolean;\r\n    load?(input: string | URL | Request, init?: RequestInit): string | Promise<string>;\r\n    escape?(value: string): string | Promise<string>;\r\n    extensions: Record<string, unknown>;\r\n};\r\nexport type TemplateCache = Map<string, string | TemplateFunction>;\r\nconst templateCache: TemplateCache = new Map<string, string | TemplateFunction>();\r\n\r\n// todo trim whitespace after <{ }>\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const WHITESPACE = \" \".charCodeAt(0);\r\n    const TAB = \"\\t\".charCodeAt(0);\r\n    const RETURN = \"\\r\".charCodeAt(0);\r\n    const NEWLINE = \"\\n\".charCodeAt(0);\r\n    const UNDERSCORE = \"_\".charCodeAt(0);\r\n    const LOWERCASE_A = \"a\".charCodeAt(0);\r\n    const LOWERCASE_Z = \"z\".charCodeAt(0);\r\n    const UPPERCASE_A = \"A\".charCodeAt(0);\r\n    const UPPERCASE_Z = \"Z\".charCodeAt(0);\r\n    const NUMBER_0 = \"0\".charCodeAt(0);\r\n    const NUMBER_9 = \"9\".charCodeAt(0);\r\n    const OPEN_ANGLE = \"<\".charCodeAt(0);\r\n    const CLOSE_ANGLE = \">\".charCodeAt(0);\r\n    const OPEN_BRACE = \"{\".charCodeAt(0);\r\n    const CLOSE_BRACE = \"}\".charCodeAt(0);\r\n    const OPEN_PARENTHESES = \"(\".charCodeAt(0);\r\n    const CLOSE_PARENTHESES = \")\".charCodeAt(0);\r\n    const ASSIGN = \"=\".charCodeAt(0);\r\n    const TILDE = \"~\".charCodeAt(0);\r\n    const SLASH = \"/\".charCodeAt(0);\r\n    const ASTERISK = \"*\".charCodeAt(0);\r\n    const BACKSLASH = \"\\\\\".charCodeAt(0);\r\n    const APOSTROPHE = \"'\".charCodeAt(0);\r\n    const QUOTE = \"\\\"\".charCodeAt(0);\r\n    const BACKTICK = \"`\".charCodeAt(0);\r\n    const DOLLAR = \"$\".charCodeAt(0);\r\n    const AT_SIGN = \"@\".charCodeAt(0);\r\n    const isWhitespace = (c: number) => c === WHITESPACE || c === TAB || c === RETURN || c === NEWLINE;\r\n    const isAlphabetic = (c: number) => c === UNDERSCORE || (c >= LOWERCASE_A && c <= LOWERCASE_Z) || (c >= UPPERCASE_A && c <= UPPERCASE_Z);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= NUMBER_0 && c <= NUMBER_9);\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += template.slice(startIndex, index);\r\n        }\r\n    };\r\n\r\n    const throwEndOfBlockExpected = (block: string) => {\r\n        throw new SyntaxError(`Expected end of ${block} at\\n${template}`);\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace(c)) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"logic block }>\");\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                startIndex = index;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"html block >}\");\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n            } else if (c === OPEN_ANGLE || isWhitespace(c)) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendResult(potentialEndWhitespace);\r\n                }\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"text block <}\");\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        let hasOnlyComment = false;\r\n        while (index < length) {\r\n            const sc = parseStringOrComment();\r\n            if (sc === 1) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            } else if (sc === 2 && !hasMeaningfulSymbol) {\r\n                hasOnlyComment = true;\r\n                startIndex = index;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                } else if (!hasOnlyComment) {\r\n                    funcBody += `yield \\`${template.slice(startIndex, index)}\\`;`;\r\n                }\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(`output block ${unsafe ? \"~}\" : \"=}\"}`);\r\n    };\r\n\r\n    const parseStringOrComment = (onlyComment = false) => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!onlyComment && !isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = 1;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                index++;\r\n                return 1;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = 2;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                index++;\r\n                return 2;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                index += 2;\r\n                return 2;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (result && isInString) {\r\n            throwEndOfBlockExpected(`string ${String.fromCharCode(isInString)}`);\r\n        }\r\n        if (result && isInComment === ASTERISK) {\r\n            throwEndOfBlockExpected(`comment */`);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseLoadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                    index += 2;\r\n                    startIndex = index;\r\n                    return;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseLoadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseLoadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace(c)) {\r\n                lastWhitespace = index;\r\n                skipWhitespace(c);\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace(c)) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (value && typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst isBrowser = Function(\"try{return this===window;}catch(e){return false;}\")();\r\n\r\nconst Nostache: {\r\n    (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction;\r\n    readonly options: TemplateOptions,\r\n    readonly cache: TemplateCache,\r\n} = ((template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options\r\n    };\r\n    const extensions = {\r\n        ...(Nostache.options ? Nostache.options.extensions : undefined),\r\n        ...(options ? options.extensions : undefined)\r\n    };\r\n    const escape = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            typeof options.escape === \"function\" ? options.escape :\r\n                (s => s === undefined || s === null ? \"\" : String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const load = (input: string | URL | Request, init?: RequestInit) => (...args: unknown[]): Promise<string> => {\r\n        return Nostache(new Promise<string>(r => {\r\n            if (typeof options.load === \"function\") {\r\n                r(options.load(input, init));\r\n            } else {\r\n                const inputString = typeof input === \"string\" ? input : input instanceof URL ? input.toString() : \"\";\r\n                const cachedTemplate = options.cache === false ? undefined : inputString ? templateCache.get(inputString) : undefined;\r\n                if (typeof cachedTemplate === \"string\") {\r\n                    r(cachedTemplate);\r\n                } else {\r\n                    (isBrowser ?\r\n                            fetch(input, init).then(r => r.text()) :\r\n                            new Promise<string>(r => require('fs').readFile(input, 'utf-8', (e: any, d: string) => r(d)))\r\n                    ).then(template => {\r\n                        if (options.cache !== false) {\r\n                            templateCache.set(inputString, template);\r\n                        }\r\n                        r(template);\r\n                    });\r\n                }\r\n            }\r\n        }), options)(...args);\r\n    };\r\n    const returnFunc = (...args: unknown[]): Promise<string> =>\r\n        new Promise<string>(r => r(template))\r\n            .then((templateString: string) => {\r\n                const cacheKey = options.async ? `async ${templateString}` : templateString;\r\n                let templateFunc = options.cache === false ? undefined : templateCache.get(cacheKey);\r\n                const templateFuncBody = templateFunc ? templateFunc.toString() : parseTemplate(templateString, options);\r\n                returnFunc.toString = () => `function () {\\n${templateFuncBody}\\n}`;\r\n                try {\r\n                    if (!templateFunc || typeof templateFunc === \"string\") {\r\n                        templateFunc = Function(templateFuncBody) as TemplateFunction;\r\n                        templateFunc.toString = () => templateFuncBody;\r\n                        if (options.cache !== false) {\r\n                            templateCache.set(cacheKey, templateFunc);\r\n                        }\r\n                    }\r\n                    if (options.verbose) {\r\n                        console.groupCollapsed(`(function () {`);\r\n                        console.log(`${templateFuncBody}})\\n(`, ...(args as any[]).reduce((a, t) => {\r\n                            if (a.length > 0) a.push(\",\");\r\n                            a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                            return a;\r\n                        }, []), \")\")\r\n                        console.groupEnd();\r\n                    }\r\n                    const contextFunc = ((...args: unknown[]) => returnFunc(...args)) as ContextFunction<unknown>;\r\n                    contextFunc[Symbol.iterator] = function* () {\r\n                        yield* args;\r\n                    };\r\n                    for (let i = 0; i < args.length; i++) {\r\n                        contextFunc[i] = args[i];\r\n                    }\r\n                    contextFunc.load = load;\r\n                    contextFunc.escape = escape;\r\n                    for (const name in extensions) {\r\n                        contextFunc[name] = extensions[name];\r\n                    }\r\n                    return iterateRecursively(templateFunc.apply(contextFunc));\r\n                } catch (error: any) {\r\n                    error.message += `\\nat function () {\\n${templateFuncBody}\\n})(${\r\n                        args.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n                    })`;\r\n                    throw error;\r\n                }\r\n            });\r\n    return returnFunc;\r\n}) as typeof Nostache;\r\n\r\n(Nostache as { options: TemplateOptions }).options = {} as TemplateOptions;\r\n(Nostache as { cache: TemplateCache }).cache = templateCache;\r\n\r\nexport default Nostache;"],"names":["g","f","exports","module","define","amd","globalThis","self","Nostache","this","templateCache","Map","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","isBrowser","Function","template","options","extensions","Object","assign","undefined","escape","String","replace","c","charCodeAt","load","input","init","args","inputString","URL","toString","cachedTemplate","cache","get","fetch","text","require","readFile","e","d","set","returnFunc","templateString","cacheKey","async","templateFunc","templateFuncBody","isWhitespace","isAlphabetic","isAlphanumeric","index","startIndex","length","funcBody","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","throwEndOfBlockExpected","block","SyntaxError","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","hasOnlyComment","sc","onlyComment","isInString","isInComment","fromCharCode","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseLoadDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","i","apply","error","message","map","join"],"mappings":"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"}