{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["const templateCache: Record<string, string> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo support of older browsers\r\n// todo expressions like <{ const f = function (i) <{ <div>Inner Template {=i=}<div/> }> }> for inner templates in JS strings\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield\r\nconst parseTemplate = (template: string) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield ${template.slice(startIndex, index)};\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && template.charCodeAt(index + 1) === ASSIGN) {\r\n            // Assignment block ={\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && template.charCodeAt(index + 1) === TILDE) {\r\n            // Unsafe assignment block ~{\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // Escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // Escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // Escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isInString = 0;\r\n        let isPotentialText = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!isInString && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                isPotentialText = false;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n            } else if (!isInString && c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialText = true;\r\n            } else if (isPotentialText && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialText && c === OPEN_ANGLE) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (isPotentialText && c === CLOSE_ANGLE) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                index++;\r\n                parseTextBlock();\r\n            } else if (isPotentialText && (c === ASSIGN || c === TILDE)) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                index++;\r\n                parseOutputBlock(c === TILDE);\r\n                startIndex--;\r\n            } else if (!isInString && c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialText = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        let isInString = 0;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (!isInString && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n            } else if (!isInString && c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    for (; index < length;) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(async function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst escape = async (value: unknown) => {\r\n    return String(await value).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`);\r\n};\r\n\r\nconst iterateGenerator = async (generator: AsyncGenerator<any>) => {\r\n    let result = '';\r\n    while (true) {\r\n        const chunk = await generator.next();\r\n        if (chunk.done) {\r\n            break;\r\n        } else {\r\n            if (typeof chunk.value?.next === \"function\") {\r\n                result += await iterateGenerator(chunk.value);\r\n            } else {\r\n                result += await chunk.value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst Nostache = (template: string): ((...context: unknown[]) => Promise<string>) & {\r\n    verbose: boolean,\r\n    toString(): string,\r\n    escape(value: unknown): Promise<string>,\r\n} => {\r\n    const funcBody = templateCache[template] ?? (templateCache[template] = parseTemplate(template));\r\n    const templateFunc = async (...context: unknown[]) => {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        for (const c of context) {\r\n            if (c && typeof c === \"object\" && !Array.isArray(c)) {\r\n                for (const p in c) {\r\n                    if (/^[_a-z]\\w*$/i.test(p)) {\r\n                        argNames.push(p);\r\n                        argValues.push((c as any)[p]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            if (templateFunc.verbose) {\r\n                console.groupCollapsed(`(function Nostache(${argNames.join(\", \")}) {`);\r\n                console.log(`${funcBody}})\\n(`, ...argValues.reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc = (...context: unknown[]) => {\r\n                return templateFunc(...context);\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.escape = templateFunc.escape;\r\n            const generator = Function(...argNames, funcBody).apply(contextFunc, argValues);\r\n            return iterateGenerator(generator);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function (${argNames.join(\", \")}) {\\n${funcBody}\\n})(${\r\n                argValues.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    };\r\n    templateFunc.verbose = Nostache.verbose;\r\n    templateFunc.escape = escape;\r\n    templateFunc.toString = () => funcBody;\r\n    return templateFunc;\r\n};\r\n\r\nNostache.verbose = false;\r\nNostache.escape = escape;\r\n\r\nexport default Nostache;"],"names":["templateCache","escape","async","value","String","replace","c","charCodeAt","iterateGenerator","generator","result","chunk","next","done","Nostache","template","funcBody","charCode","char","length","map","i","isWhitespace","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","ASSIGN","TILDE","BACKSLASH","APOSTROPHE","QUOTE","BACKTICK","DOLLAR","index","startIndex","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","parseOpenBlock","parseLogicBlock","parseOutputBlock","isInString","isPotentialText","parseHtmlBlock","parseTextBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","parseTemplate","templateFunc","context","argNames","argValues","Array","isArray","p","test","push","verbose","console","groupCollapsed","join","log","reduce","a","t","groupEnd","contextFunc","Function","apply","error","message","toString"],"mappings":"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"}