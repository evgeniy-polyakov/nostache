{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["type TemplateFunction = (this: TemplateFunction & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): Promise<TemplateFunction>;\r\n}, ...context: any[]) => Promise<string>;\r\ntype TemplateOptions = {\r\n    async?: boolean;\r\n};\r\nconst templateCache: Record<string, TemplateFunction> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo cache tests, cache clear function\r\n// todo loader option\r\n// todo default template options\r\n// todo output {=  =} or {~  ~} as whitespace `  `\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield in some cases\r\nconst parseTemplate = (template: string, options?: TemplateOptions) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const isAlphabetic = (c: number) => c === 95 || (c >= 65 && c <= 90) || (c >= 97 && c <= 122);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= 48 && c <= 57);\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const OPEN_PARENTHESES = charCode(\"(\");\r\n    const CLOSE_PARENTHESES = charCode(\")\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const SLASH = charCode(\"/\");\r\n    const ASTERISK = charCode(\"*\");\r\n    const NEWLINE = charCode(\"\\n\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n    const AT_SIGN = charCode(\"@\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unescape: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unescape ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                isPotentialHtml = false;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unescape: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unescape ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unescape);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseStringOrComment = () => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                isInComment = 0;\r\n                index++;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                isInComment = 0;\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseloadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseloadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseloadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace[c]) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options?.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace[c]) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options?.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst escape = (value: unknown) => {\r\n    return iterateRecursively(value).then(s => String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`));\r\n};\r\n\r\nconst load = (input: string | URL | Request, init?: RequestInit) => {\r\n    return Nostache(fetch(input, init).then(r => r.text()));\r\n};\r\n\r\nconst getTemplateKey = (template: string, options?: TemplateOptions) => {\r\n    return options?.async ? `async ${template}` : template;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst Nostache = (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    if (typeof template === \"string\") {\r\n        const key = getTemplateKey(template, options);\r\n        if (templateCache[key]) {\r\n            return templateCache[key];\r\n        }\r\n    }\r\n    const templateFunc = (...context: any[]) => new Promise<string>(r => r(template)).then((templateString: string) => {\r\n        const key = getTemplateKey(templateString, options);\r\n        if (templateCache[key] && templateCache[key] !== templateFunc) {\r\n            (templateCache as any)[key](...context);\r\n        }\r\n        const funcBody = parseTemplate(templateString, options);\r\n        templateCache[key] = templateFunc;\r\n        try {\r\n            if (Nostache.verbose) {\r\n                console.groupCollapsed(`(function () {`);\r\n                console.log(`${funcBody}})\\n(`, ...context.reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc = (...context: unknown[]) => {\r\n                return templateFunc(...context);\r\n            };\r\n            (contextFunc as any)[Symbol.iterator] = function* () {\r\n                yield* context;\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.load = Nostache.load;\r\n            contextFunc.escape = Nostache.escape;\r\n            return iterateRecursively(Function(funcBody).apply(contextFunc));\r\n        } catch (error: any) {\r\n            error.message += `\\nat function () {\\n${funcBody}\\n})(${\r\n                context.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    });\r\n    return templateFunc;\r\n};\r\n\r\nNostache.verbose = false;\r\nNostache.load = load;\r\nNostache.escape = escape;\r\n\r\nexport default Nostache;"],"names":["templateCache","getTemplateKey","template","options","async","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","Nostache","key","templateFunc","context","templateString","funcBody","charCode","char","length","map","i","charCodeAt","isWhitespace","isAlphabetic","c","isAlphanumeric","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","OPEN_PARENTHESES","CLOSE_PARENTHESES","ASSIGN","TILDE","SLASH","ASTERISK","NEWLINE","BACKSLASH","APOSTROPHE","QUOTE","BACKTICK","DOLLAR","AT_SIGN","index","startIndex","appendResult","endIndex","extra","slice","appendOutput","unescape","appendLogic","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","isInString","isInComment","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseloadDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","load","escape","Function","apply","error","message","join","input","init","fetch","text","String","replace"],"mappings":"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"}