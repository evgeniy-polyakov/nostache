{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["type ContextFunction<TArgument, TExtensions extends Record<string, unknown> = Record<string, unknown>, TExtensionName extends keyof TExtensions = keyof TExtensions> = {\r\n    (...args: TArgument[]): Promise<string>,\r\n    [arg: number]: TArgument,\r\n} & Iterable<TArgument> & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): TemplateFunction;\r\n} & {\r\n    [name in TExtensionName]: TExtensions[TExtensionName];\r\n};\r\ntype TemplateFunction = {\r\n    <TArg>(this: ContextFunction<TArg>, ...context: TArg[]): Promise<string>;\r\n    toString(): string;\r\n};\r\ntype TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    cache?: boolean;\r\n    load?(input: string | URL | Request, init?: RequestInit): string | Promise<string>;\r\n    escape?(value: string): string | Promise<string>;\r\n    extensions: Record<string, unknown>;\r\n};\r\ntype TemplateCache = Map<string, TemplateFunction>;\r\nconst templateCache: TemplateCache = new Map<string, TemplateFunction>();\r\n\r\n// todo errors for unfinished expressions\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield in some cases\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const WHITESPACE = \" \".charCodeAt(0);\r\n    const TAB = \"\\t\".charCodeAt(0);\r\n    const RETURN = \"\\r\".charCodeAt(0);\r\n    const NEWLINE = \"\\n\".charCodeAt(0);\r\n    const UNDERSCORE = \"_\".charCodeAt(0);\r\n    const LOWERCASE_A = \"a\".charCodeAt(0);\r\n    const LOWERCASE_Z = \"z\".charCodeAt(0);\r\n    const UPPERCASE_A = \"A\".charCodeAt(0);\r\n    const UPPERCASE_Z = \"Z\".charCodeAt(0);\r\n    const NUMBER_0 = \"0\".charCodeAt(0);\r\n    const NUMBER_9 = \"9\".charCodeAt(0);\r\n    const OPEN_ANGLE = \"<\".charCodeAt(0);\r\n    const CLOSE_ANGLE = \">\".charCodeAt(0);\r\n    const OPEN_BRACE = \"{\".charCodeAt(0);\r\n    const CLOSE_BRACE = \"}\".charCodeAt(0);\r\n    const OPEN_PARENTHESES = \"(\".charCodeAt(0);\r\n    const CLOSE_PARENTHESES = \")\".charCodeAt(0);\r\n    const ASSIGN = \"=\".charCodeAt(0);\r\n    const TILDE = \"~\".charCodeAt(0);\r\n    const SLASH = \"/\".charCodeAt(0);\r\n    const ASTERISK = \"*\".charCodeAt(0);\r\n    const BACKSLASH = \"\\\\\".charCodeAt(0);\r\n    const APOSTROPHE = \"'\".charCodeAt(0);\r\n    const QUOTE = \"\\\"\".charCodeAt(0);\r\n    const BACKTICK = \"`\".charCodeAt(0);\r\n    const DOLLAR = \"$\".charCodeAt(0);\r\n    const AT_SIGN = \"@\".charCodeAt(0);\r\n    const isWhitespace = (c: number) => c === WHITESPACE || c === TAB || c === RETURN || c === NEWLINE;\r\n    const isAlphabetic = (c: number) => c === UNDERSCORE || (c >= LOWERCASE_A && c <= LOWERCASE_Z) || (c >= UPPERCASE_A && c <= UPPERCASE_Z);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= NUMBER_0 && c <= NUMBER_9);\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += template.slice(startIndex, index);\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                isPotentialHtml = false;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace(c)) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace(c))) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unescape: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unescape ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unescape);\r\n                } else {\r\n                    funcBody += `yield \\`${template.slice(startIndex, index)}\\`;`;\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseStringOrComment = () => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                isInComment = 0;\r\n                index++;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                isInComment = 0;\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseloadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseloadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseloadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace(c)) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace(c)) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (value && typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst Nostache: {\r\n    (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction;\r\n    readonly options: TemplateOptions,\r\n    readonly cache: TemplateCache,\r\n} = ((template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options\r\n    };\r\n    const extensions = {\r\n        ...(Nostache.options ? Nostache.options.extensions : undefined),\r\n        ...(options ? options.extensions : undefined)\r\n    };\r\n    const escape = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            typeof options.escape === \"function\" ? options.escape :\r\n                (s => s === undefined || s === null ? \"\" : String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const load = (input: string | URL | Request, init?: RequestInit) => {\r\n        return Nostache(typeof options.load === \"function\" ? options.load(input, init) : fetch(input, init).then(r => r.text()));\r\n    };\r\n    const templateFunc = (...args: unknown[]) =>\r\n        new Promise<string>(r => r(template))\r\n            .then((templateString: string) => {\r\n                const key = options.async ? `async ${templateString}` : templateString;\r\n                let func = templateCache.get(key);\r\n                const funcBody = func ? func.toString() : parseTemplate(templateString, options);\r\n                templateFunc.toString = () => `function () {\\n${funcBody}\\n}`;\r\n                try {\r\n                    if (!func) {\r\n                        func = Function(funcBody) as TemplateFunction;\r\n                        func.toString = () => funcBody;\r\n                        if (options.cache !== false) {\r\n                            templateCache.set(key, func);\r\n                        }\r\n                    }\r\n                    if (options.verbose) {\r\n                        console.groupCollapsed(`(function () {`);\r\n                        console.log(`${funcBody}})\\n(`, ...(args as any[]).reduce((a, t) => {\r\n                            if (a.length > 0) a.push(\",\");\r\n                            a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                            return a;\r\n                        }, []), \")\")\r\n                        console.groupEnd();\r\n                    }\r\n                    const contextFunc = ((...args: unknown[]) => templateFunc(...args)) as ContextFunction<unknown>;\r\n                    contextFunc[Symbol.iterator] = function* () {\r\n                        yield* args;\r\n                    };\r\n                    for (let i = 0; i < args.length; i++) {\r\n                        contextFunc[i] = args[i];\r\n                    }\r\n                    contextFunc.load = load;\r\n                    contextFunc.escape = escape;\r\n                    for (const name in extensions) {\r\n                        contextFunc[name] = extensions[name];\r\n                    }\r\n                    return iterateRecursively(func.apply(contextFunc));\r\n                } catch (error: any) {\r\n                    error.message += `\\nat function () {\\n${funcBody}\\n})(${\r\n                        args.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n                    })`;\r\n                    throw error;\r\n                }\r\n            });\r\n    return templateFunc;\r\n}) as typeof Nostache;\r\n\r\n(Nostache as { options: TemplateOptions }).options = {} as TemplateOptions;\r\n(Nostache as { cache: TemplateCache }).cache = templateCache;\r\n\r\nexport default Nostache;"],"names":["g","f","exports","module","define","amd","globalThis","self","Nostache","this","templateCache","Map","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","template","options","extensions","Object","assign","undefined","escape","String","replace","c","charCodeAt","load","input","init","fetch","text","templateFunc","args","templateString","key","async","func","get","funcBody","toString","isWhitespace","isAlphabetic","isAlphanumeric","index","startIndex","length","appendResult","endIndex","extra","slice","appendLogic","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","unescape","closeChar","isInString","isInComment","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseloadDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","Function","cache","set","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","i","apply","error","message","map","join"],"mappings":"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"}