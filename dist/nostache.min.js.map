{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["const templateCache: Record<string, string> = {};\r\n\r\nfunction parseTemplate(template: string) {\r\n\r\n    function charCode(char: string) {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    }\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const SEMICOLON = charCode(\";\");\r\n    const EQUAL = charCode(\"=\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const QUOTE = charCode(\"'\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    const result = \"__nostache__\";\r\n    let funcBody = `let ${result}='';\\n`;\r\n\r\n    function appendResult(endIndex = index, extra = \"\") {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `${result}+='${template.slice(startIndex, endIndex)}${extra}';\\n`;\r\n        }\r\n    }\r\n\r\n    function appendOutput() {\r\n        if (index > startIndex) {\r\n            funcBody += `${result}+=${template.slice(startIndex, index)};\\n`;\r\n        }\r\n    }\r\n\r\n    function appendLogic() {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}\\n`;\r\n        }\r\n    }\r\n\r\n    function escapeChar(c: number) {\r\n        if (c === BACKSLASH) {\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === QUOTE) {\r\n            appendResult(index, \"\\\\'\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseOpenBlock(c: number) {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === EQUAL && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock();\r\n            return true;\r\n        } else if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === SEMICOLON && template.charCodeAt(index + 2) === CLOSE_ANGLE) {\r\n            appendResult();\r\n            index++;\r\n            startIndex = index;\r\n            index++;\r\n            appendLogic();\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (escapeChar(c)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseLogicBlock() {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialHtml = true;\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseHtmlBlock() {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (escapeChar(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    function parseOutputBlock() {\r\n        startIndex = index;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput();\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else if (isWhitespace[c]) {\r\n                index++;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    }\r\n\r\n    for (; index < length;) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    funcBody += `return ${result};`;\r\n\r\n    return funcBody;\r\n}\r\n\r\nexport default function Nostache(template: string): (context?: unknown) => string {\r\n    const funcBody = templateCache[template] ?? (templateCache[template] = parseTemplate(template));\r\n    return (context?: unknown) => {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        const baseObject = {};\r\n        if (context && typeof context === \"object\") {\r\n            for (const p in context) {\r\n                if (!(p in baseObject) && /^[_a-z]\\w*$/i.test(p)) {\r\n                    argNames.push(p);\r\n                    argValues.push((context as any)[p]);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            return Function(...argNames, funcBody).apply(context, argValues);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function (${argNames.join(\", \")}) {\\n${funcBody}\\n}`;\r\n            throw error;\r\n        }\r\n    };\r\n}"],"names":["templateCache","parseTemplate","template","charCode","char","length","map","i","charCodeAt","isWhitespace","OPEN_ANGLE","CLOSE_ANGLE","OPEN_BRACE","CLOSE_BRACE","SEMICOLON","EQUAL","BACKSLASH","QUOTE","index","startIndex","result","funcBody","appendResult","endIndex","extra","slice","appendOutput","appendLogic","escapeChar","c","parseOpenBlock","isPotentialHtml","parseHtmlBlock","parseLogicBlock","hasMeaningfulSymbol","parseOutputBlock","potentialEnd","_a","context","argNames","argValues","baseObject","p","test","push","Function","apply","error","message","join"],"mappings":"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"}