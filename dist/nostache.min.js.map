{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["export type ContextFunction<TArgument, TExtensions extends Record<string, unknown> = Record<string, unknown>, TExtensionName extends keyof TExtensions = keyof TExtensions> = {\r\n    (this: ContextFunction<TArgument, TExtensions, TExtensionName>, ...args: TArgument[]): Promise<string>,\r\n    [arg: number]: TArgument,\r\n} & Iterable<TArgument> & {\r\n    escape(value: unknown): Promise<string>,\r\n    import(value: string): TemplateFunction;\r\n} & {\r\n    [name in TExtensionName]: TExtensions[TExtensionName];\r\n};\r\nexport type TemplateFunction = {\r\n    <TArgument>(...args: TArgument[]): Promise<string>;\r\n    toString(): string;\r\n};\r\nexport type TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    cache?: boolean | 0 | 1 | 2;\r\n    import?(value: string): string | Promise<string>;\r\n    escape?(value: string): string | Promise<string>;\r\n    extensions: Record<string, unknown>;\r\n};\r\nexport type TemplateCache = {\r\n    get(key: string, options?: \"async\"): TemplateFunction;\r\n    get(key: string, options: \"import\"): string;\r\n    set(key: string, value: TemplateFunction, options?: \"async\"): void;\r\n    set(key: string, value: string): void;\r\n    delete(key: string, options?: \"async\"): void;\r\n    delete(key: string, options: \"import\"): void;\r\n    clear(): void;\r\n};\r\nconst ASYNC = \"async\";\r\nconst IMPORT = \"import\";\r\n\r\n// todo trim whitespace after <{ }>\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const WHITESPACE = \" \".charCodeAt(0);\r\n    const TAB = \"\\t\".charCodeAt(0);\r\n    const RETURN = \"\\r\".charCodeAt(0);\r\n    const NEWLINE = \"\\n\".charCodeAt(0);\r\n    const UNDERSCORE = \"_\".charCodeAt(0);\r\n    const LOWERCASE_A = \"a\".charCodeAt(0);\r\n    const LOWERCASE_Z = \"z\".charCodeAt(0);\r\n    const UPPERCASE_A = \"A\".charCodeAt(0);\r\n    const UPPERCASE_Z = \"Z\".charCodeAt(0);\r\n    const NUMBER_0 = \"0\".charCodeAt(0);\r\n    const NUMBER_9 = \"9\".charCodeAt(0);\r\n    const OPEN_ANGLE = \"<\".charCodeAt(0);\r\n    const CLOSE_ANGLE = \">\".charCodeAt(0);\r\n    const OPEN_BRACE = \"{\".charCodeAt(0);\r\n    const CLOSE_BRACE = \"}\".charCodeAt(0);\r\n    const OPEN_PARENTHESES = \"(\".charCodeAt(0);\r\n    const CLOSE_PARENTHESES = \")\".charCodeAt(0);\r\n    const ASSIGN = \"=\".charCodeAt(0);\r\n    const TILDE = \"~\".charCodeAt(0);\r\n    const SLASH = \"/\".charCodeAt(0);\r\n    const ASTERISK = \"*\".charCodeAt(0);\r\n    const BACKSLASH = \"\\\\\".charCodeAt(0);\r\n    const APOSTROPHE = \"'\".charCodeAt(0);\r\n    const QUOTE = \"\\\"\".charCodeAt(0);\r\n    const BACKTICK = \"`\".charCodeAt(0);\r\n    const DOLLAR = \"$\".charCodeAt(0);\r\n    const AT_SIGN = \"@\".charCodeAt(0);\r\n    const isWhitespace = (c: number) => c === WHITESPACE || c === TAB || c === RETURN || c === NEWLINE;\r\n    const isAlphabetic = (c: number) => c === UNDERSCORE || (c >= LOWERCASE_A && c <= LOWERCASE_Z) || (c >= UPPERCASE_A && c <= UPPERCASE_Z);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= NUMBER_0 && c <= NUMBER_9);\r\n    const asyncModifier = options.async ? \"async \" : \"\";\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += template.slice(startIndex, index);\r\n        }\r\n    };\r\n\r\n    const throwEndOfBlockExpected = (block: string) => {\r\n        throw new SyntaxError(`Expected end of ${block} at\\n${template}`);\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace(c)) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"logic block }>\");\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                startIndex = index;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"html block >}\");\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n            } else if (c === OPEN_ANGLE || isWhitespace(c)) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendResult(potentialEndWhitespace);\r\n                }\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"text block <}\");\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        let hasOnlyComment = false;\r\n        while (index < length) {\r\n            const sc = parseStringOrComment();\r\n            if (sc === 1) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            } else if (sc === 2 && !hasMeaningfulSymbol) {\r\n                hasOnlyComment = true;\r\n                startIndex = index;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                } else if (!hasOnlyComment) {\r\n                    funcBody += `yield \\`${template.slice(startIndex, index)}\\`;`;\r\n                }\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(`output block ${unsafe ? \"~}\" : \"=}\"}`);\r\n    };\r\n\r\n    const parseStringOrComment = (onlyComment = false) => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!onlyComment && !isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = 1;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                index++;\r\n                return 1;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = 2;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                index++;\r\n                return 2;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                index += 2;\r\n                return 2;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (result && isInString) {\r\n            throwEndOfBlockExpected(`string ${String.fromCharCode(isInString)}`);\r\n        }\r\n        if (result && isInComment === ASTERISK) {\r\n            throwEndOfBlockExpected(`comment */`);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseImportDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                    index += 2;\r\n                    startIndex = index;\r\n                    return;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseImportDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseImportDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.${IMPORT}(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace(c)) {\r\n                lastWhitespace = index;\r\n                skipWhitespace(c);\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${asyncModifier}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"declaration block @}\");\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace(c)) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${asyncModifier}function*(){\\n${funcBody}}).call(this)`;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (value && typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst isBrowser = Function(\"try{return this===window;}catch(e){return false;}\")();\r\n\r\nconst Nostache: {\r\n    (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction;\r\n    readonly options: TemplateOptions,\r\n    readonly cache: TemplateCache,\r\n} = ((template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options\r\n    };\r\n    const extensions = {\r\n        ...(Nostache.options ? Nostache.options.extensions : undefined),\r\n        ...(options ? options.extensions : undefined)\r\n    };\r\n    const cache = options.cache === false ? 0 : (options.cache || 3);\r\n    const escapeFunc = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            typeof options.escape === \"function\" ? options.escape :\r\n                (s => s === undefined || s === null ? \"\" : String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const importFunc = (value: string) => (...args: unknown[]): Promise<string> => {\r\n        return Nostache(new Promise<string>((res, rej) => {\r\n            const cachedTemplate = (cache & 1) ? Nostache.cache.get(value, IMPORT) : undefined;\r\n            if (cachedTemplate !== undefined) {\r\n                res(cachedTemplate);\r\n            } else {\r\n                const cacheAndResolve = (template: string) => {\r\n                    if (cache & 1) {\r\n                        Nostache.cache.set(value, template);\r\n                    }\r\n                    res(template);\r\n                };\r\n                try {\r\n                    const i = options.import;\r\n                    if (typeof i === \"function\") {\r\n                        new Promise<string>(r => r(i(value))).then(cacheAndResolve);\r\n                    } else if (isBrowser) {\r\n                        fetch(value).then(response => response.status === 200 ? response.text().then(cacheAndResolve) : rej(new Error(`${response.status} ${response.url}`)));\r\n                    } else {\r\n                        require(\"fs\").readFile(value, \"utf8\", (error: any, data: string) => error ? rej(error) : cacheAndResolve(data));\r\n                    }\r\n                } catch (e) {\r\n                    rej(e);\r\n                }\r\n            }\r\n        }), options)(...args);\r\n    };\r\n    const returnFunc = (...args: unknown[]): Promise<string> =>\r\n        new Promise<string>(r => r(template))\r\n            .then((templateString: string) => {\r\n                const cacheOptions = options.async ? ASYNC : undefined;\r\n                let templateFunc = (cache & 2) ? Nostache.cache.get(templateString, cacheOptions) : undefined;\r\n                const templateFuncBody = templateFunc ? templateFunc.toString() : parseTemplate(templateString, options);\r\n                returnFunc.toString = () => `function () {\\n${templateFuncBody}\\n}`;\r\n                try {\r\n                    if (!templateFunc) {\r\n                        templateFunc = Function(templateFuncBody) as TemplateFunction;\r\n                        templateFunc.toString = () => templateFuncBody;\r\n                        if (cache & 2) {\r\n                            Nostache.cache.set(templateString, templateFunc, cacheOptions);\r\n                        }\r\n                    }\r\n                    if (options.verbose) {\r\n                        console.groupCollapsed(`(function () {`);\r\n                        console.log(`${templateFuncBody}})\\n(`, ...(args as any[]).reduce((a, t) => {\r\n                            if (a.length > 0) a.push(\",\");\r\n                            a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                            return a;\r\n                        }, []), \")\")\r\n                        console.groupEnd();\r\n                    }\r\n                    const contextFunc = ((...args: unknown[]) => returnFunc(...args)) as ContextFunction<unknown>;\r\n                    contextFunc[Symbol.iterator] = function* () {\r\n                        yield* args;\r\n                    };\r\n                    for (let i = 0; i < args.length; i++) {\r\n                        contextFunc[i] = args[i];\r\n                    }\r\n                    contextFunc.import = importFunc;\r\n                    contextFunc.escape = escapeFunc;\r\n                    for (const name in extensions) {\r\n                        contextFunc[name] = extensions[name];\r\n                    }\r\n                    return iterateRecursively(templateFunc.apply(contextFunc));\r\n                } catch (error: any) {\r\n                    error.message += `\\nat function () {\\n${templateFuncBody}\\n})(${\r\n                        args.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n                    })`;\r\n                    throw error;\r\n                }\r\n            });\r\n    return returnFunc;\r\n}) as typeof Nostache;\r\n\r\n(Nostache as { options: TemplateOptions }).options = {} as TemplateOptions;\r\n(Nostache as { cache: TemplateCache }).cache = (() => {\r\n    let cache: Record<string, TemplateFunction> = {};\r\n    let asyncCache: Record<string, TemplateFunction> = {};\r\n    let importCache: Record<string, string> = {};\r\n    return {\r\n        get(key: string, options?: \"async\" | \"import\") {\r\n            return options === IMPORT ? importCache[key] : options === ASYNC ? asyncCache[key] : cache[key];\r\n        },\r\n        set(key: string, value: TemplateFunction | string, options?: \"async\") {\r\n            if (typeof value === \"string\") importCache[key] = value;\r\n            else if (options === ASYNC) asyncCache[key] = value;\r\n            else cache[key] = value;\r\n        },\r\n        delete(key: string, options?: \"async\" | \"import\") {\r\n            if (options === IMPORT) delete importCache[key];\r\n            else if (options === ASYNC) delete asyncCache[key];\r\n            else delete cache[key];\r\n        },\r\n        clear() {\r\n            cache = {};\r\n            asyncCache = {};\r\n            importCache = {};\r\n        },\r\n    } as TemplateCache;\r\n})();\r\n\r\nexport default Nostache;"],"names":["ASYNC","IMPORT","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","s","isBrowser","Function","Nostache","template","options","extensions","Object","assign","undefined","cache","escapeFunc","escape","String","replace","c","charCodeAt","importFunc","args","res","rej","cachedTemplate","get","cacheAndResolve","set","i","import","fetch","response","status","text","Error","url","require","readFile","error","data","e","returnFunc","templateString","cacheOptions","async","templateFunc","templateFuncBody","toString","isWhitespace","isAlphabetic","isAlphanumeric","asyncModifier","index","startIndex","length","funcBody","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","throwEndOfBlockExpected","block","SyntaxError","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","hasOnlyComment","sc","onlyComment","isInString","isInComment","fromCharCode","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseImportDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","apply","message","map","join","asyncCache","importCache","key","clear"],"mappings":"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"}