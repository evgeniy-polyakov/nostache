{"version":3,"file":"nostache.min.js","sources":["../src/index.ts"],"sourcesContent":["export type ContextFunction<TArgument, TExtensions extends Record<string, unknown> = Record<string, unknown>, TExtensionName extends keyof TExtensions = keyof TExtensions> = {\r\n    (this: ContextFunction<TArgument, TExtensions, TExtensionName>, ...args: TArgument[]): Promise<string>,\r\n    [arg: number]: TArgument,\r\n} & Iterable<TArgument> & {\r\n    escape(value: unknown): Promise<string>,\r\n    import(value: string): TemplateFunction;\r\n} & {\r\n    [name in TExtensionName]: TExtensions[TExtensionName];\r\n};\r\nexport type TemplateFunction = {\r\n    <TArgument>(...args: TArgument[]): Promise<string>;\r\n    toString(): string;\r\n};\r\nexport type TemplateOptions = {\r\n    verbose?: boolean;\r\n    async?: boolean;\r\n    cache?: boolean | \"import\" | \"function\";\r\n    import?(value: string): string | Promise<string>;\r\n    escape?(value: string): string | Promise<string>;\r\n    extensions: Record<string, unknown>;\r\n};\r\nexport type TemplateCache = {\r\n    get(key: string, options?: \"function\" | \"async\"): TemplateFunction;\r\n    get(key: string, options: \"import\"): string;\r\n    set(key: string, value: TemplateFunction, options?: \"function\" | \"async\"): void;\r\n    set(key: string, value: string): void;\r\n    delete(key: string, options?: \"import\" | \"function\" | \"async\"): void;\r\n    clear(options?: \"import\" | \"function\" | \"async\"): void;\r\n};\r\nconst ASYNC = \"async\";\r\nconst IMPORT = \"import\";\r\nconst FUNCTION = \"function\";\r\nconst UNDEFINED = undefined;\r\nconst isString = (s: unknown): s is string => typeof s === \"string\";\r\nconst isFunction = (f: unknown): f is { (...args: any): any } => typeof f === FUNCTION;\r\n\r\n// todo trim whitespace after <{ }>\r\nconst parseTemplate = (template: string, options: TemplateOptions) => {\r\n\r\n    const WHITESPACE = \" \".charCodeAt(0);\r\n    const TAB = \"\\t\".charCodeAt(0);\r\n    const RETURN = \"\\r\".charCodeAt(0);\r\n    const NEWLINE = \"\\n\".charCodeAt(0);\r\n    const UNDERSCORE = \"_\".charCodeAt(0);\r\n    const LOWERCASE_A = \"a\".charCodeAt(0);\r\n    const LOWERCASE_Z = \"z\".charCodeAt(0);\r\n    const UPPERCASE_A = \"A\".charCodeAt(0);\r\n    const UPPERCASE_Z = \"Z\".charCodeAt(0);\r\n    const NUMBER_0 = \"0\".charCodeAt(0);\r\n    const NUMBER_9 = \"9\".charCodeAt(0);\r\n    const OPEN_ANGLE = \"<\".charCodeAt(0);\r\n    const CLOSE_ANGLE = \">\".charCodeAt(0);\r\n    const OPEN_BRACE = \"{\".charCodeAt(0);\r\n    const CLOSE_BRACE = \"}\".charCodeAt(0);\r\n    const OPEN_PARENTHESES = \"(\".charCodeAt(0);\r\n    const CLOSE_PARENTHESES = \")\".charCodeAt(0);\r\n    const ASSIGN = \"=\".charCodeAt(0);\r\n    const TILDE = \"~\".charCodeAt(0);\r\n    const SLASH = \"/\".charCodeAt(0);\r\n    const ASTERISK = \"*\".charCodeAt(0);\r\n    const BACKSLASH = \"\\\\\".charCodeAt(0);\r\n    const APOSTROPHE = \"'\".charCodeAt(0);\r\n    const QUOTE = \"\\\"\".charCodeAt(0);\r\n    const BACKTICK = \"`\".charCodeAt(0);\r\n    const DOLLAR = \"$\".charCodeAt(0);\r\n    const AT_SIGN = \"@\".charCodeAt(0);\r\n    const isWhitespace = (c: number) => c === WHITESPACE || c === TAB || c === RETURN || c === NEWLINE;\r\n    const isAlphabetic = (c: number) => c === UNDERSCORE || (c >= LOWERCASE_A && c <= LOWERCASE_Z) || (c >= UPPERCASE_A && c <= UPPERCASE_Z);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= NUMBER_0 && c <= NUMBER_9);\r\n    const asyncModifier = options.async ? \"async \" : \"\";\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += template.slice(startIndex, index);\r\n        }\r\n    };\r\n\r\n    const throwEndOfBlockExpected = (block: string) => {\r\n        throw new SyntaxError(`Expected end of ${block} at\\n${template}`);\r\n    };\r\n\r\n    const throwEndOfDeclarationBlockExpected = () => throwEndOfBlockExpected(\"declaration block @}\");\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace(c)) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"logic block }>\");\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                startIndex = index;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"html block >}\");\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n            } else if (c === OPEN_ANGLE || isWhitespace(c)) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace(c)) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendResult(potentialEndWhitespace);\r\n                }\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(\"text block <}\");\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        let hasOnlyComment = false;\r\n        while (index < length) {\r\n            const sc = parseStringOrComment();\r\n            if (sc === 1) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            } else if (sc === 2 && !hasMeaningfulSymbol) {\r\n                hasOnlyComment = true;\r\n                startIndex = index;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace(c)) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                } else if (!hasOnlyComment) {\r\n                    funcBody += `yield \\`${template.slice(startIndex, index)}\\`;`;\r\n                }\r\n                index += 2;\r\n                startIndex = index;\r\n                return;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        throwEndOfBlockExpected(`output block ${unsafe ? \"~}\" : \"=}\"}`);\r\n    };\r\n\r\n    const parseStringOrComment = (onlyComment = false) => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!onlyComment && !isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = 1;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                index++;\r\n                return 1;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = 2;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                index++;\r\n                return 2;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                index += 2;\r\n                return 2;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (result && isInString) {\r\n            throwEndOfBlockExpected(`string ${String.fromCharCode(isInString)}`);\r\n        }\r\n        if (result && isInComment === ASTERISK) {\r\n            throwEndOfBlockExpected(`comment */`);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseImportDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                    index += 2;\r\n                    startIndex = index;\r\n                    return;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (parseStringOrComment(true)) {\r\n                    c = skipWhitespace(template.charCodeAt(index));\r\n                }\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseImportDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfDeclarationBlockExpected();\r\n    };\r\n\r\n    const parseImportDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (parseStringOrComment(true)) {\r\n                // continue\r\n            } else if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.import(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                return;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfDeclarationBlockExpected();\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace(c)) {\r\n                lastWhitespace = index;\r\n                skipWhitespace(c);\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${asyncModifier}${FUNCTION}*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                return;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        throwEndOfDeclarationBlockExpected();\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace(c)) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${asyncModifier}${FUNCTION}*(){\\n${funcBody}}).call(this)`;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (value && isFunction(value.next)) {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst isAnyEqual = (value: unknown, ...values: any) => values.some((v: any) => v === value);\r\n\r\nconst isBrowser = Function(`try{return this===window;}catch(e){}`)();\r\n\r\nconst Nostache: {\r\n    (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction;\r\n    readonly options: TemplateOptions,\r\n    readonly cache: TemplateCache,\r\n} = ((template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options\r\n    };\r\n    const extensions = {\r\n        ...(Nostache.options ? Nostache.options.extensions : UNDEFINED),\r\n        ...(options ? options.extensions : UNDEFINED)\r\n    };\r\n    const cache = options.cache;\r\n    const isAllCache = cache === UNDEFINED || cache === true;\r\n    const isImportCache = isAllCache || cache === IMPORT;\r\n    const isFunctionCache = isAllCache || cache === FUNCTION;\r\n    const escapeFunc = (value: unknown) => {\r\n        return iterateRecursively(value).then(\r\n            isFunction(options.escape) ? options.escape :\r\n                (s => s === UNDEFINED || s === null ? \"\" : String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const importFunc = (value: string) => (...args: unknown[]): Promise<string> => {\r\n        return Nostache(new Promise<string>((res, rej) => {\r\n            const cachedTemplate = isImportCache ? Nostache.cache.get(value, IMPORT) : UNDEFINED;\r\n            if (cachedTemplate !== UNDEFINED) {\r\n                res(cachedTemplate);\r\n            } else {\r\n                const cacheAndResolve = (template: string) => {\r\n                    if (isImportCache) {\r\n                        Nostache.cache.set(value, template);\r\n                    }\r\n                    res(template);\r\n                };\r\n                try {\r\n                    const optionsImport = options.import;\r\n                    if (isFunction(optionsImport)) {\r\n                        new Promise<string>(r => r(optionsImport(value))).then(cacheAndResolve);\r\n                    } else if (isBrowser) {\r\n                        fetch(value).then(response => response.status === 200 ? response.text().then(cacheAndResolve) : rej(new Error(`${response.status} ${response.url}`)));\r\n                    } else {\r\n                        require(\"fs\").readFile(value, \"utf8\", (error: any, data: string) => error ? rej(error) : cacheAndResolve(data));\r\n                    }\r\n                } catch (e) {\r\n                    rej(e);\r\n                }\r\n            }\r\n        }), options)(...args);\r\n    };\r\n    const returnFunc = (...args: unknown[]): Promise<string> =>\r\n        new Promise<string>(r => r(template))\r\n            .then((templateString: string) => {\r\n                const cacheOptions = options.async ? ASYNC : UNDEFINED;\r\n                let templateFunc = isFunctionCache ? Nostache.cache.get(templateString, cacheOptions) : UNDEFINED;\r\n                const templateFuncBody = templateFunc ? templateFunc.toString() : parseTemplate(templateString, options);\r\n                returnFunc.toString = () => `${FUNCTION} () {\\n${templateFuncBody}\\n}`;\r\n                try {\r\n                    if (!templateFunc) {\r\n                        templateFunc = Function(templateFuncBody) as TemplateFunction;\r\n                        templateFunc.toString = () => templateFuncBody;\r\n                        if (isFunctionCache) {\r\n                            Nostache.cache.set(templateString, templateFunc, cacheOptions);\r\n                        }\r\n                    }\r\n                    if (options.verbose) {\r\n                        console.groupCollapsed(`(${FUNCTION} () {`);\r\n                        console.log(`${templateFuncBody}})\\n(`, ...(args as any[]).reduce((a, t) => {\r\n                            if (a.length > 0) a.push(\",\");\r\n                            a.push(isString(t) ? `\"${t}\"` : t);\r\n                            return a;\r\n                        }, []), \")\")\r\n                        console.groupEnd();\r\n                    }\r\n                    const contextFunc = ((...args: unknown[]) => returnFunc(...args)) as ContextFunction<unknown>;\r\n                    contextFunc[Symbol.iterator] = function* () {\r\n                        yield* args;\r\n                    };\r\n                    for (let i = 0; i < args.length; i++) {\r\n                        contextFunc[i] = args[i];\r\n                    }\r\n                    contextFunc.import = importFunc;\r\n                    contextFunc.escape = escapeFunc;\r\n                    for (const name in extensions) {\r\n                        contextFunc[name] = extensions[name];\r\n                    }\r\n                    return iterateRecursively(templateFunc.apply(contextFunc));\r\n                } catch (error: any) {\r\n                    error.message += `\\nat ${FUNCTION} () {\\n${templateFuncBody}\\n})(${\r\n                        args.map(t => isString(t) ? `\"${t}\"` : t).join(\", \")\r\n                    })`;\r\n                    throw error;\r\n                }\r\n            });\r\n    return returnFunc;\r\n}) as typeof Nostache;\r\n\r\n(Nostache as { options: TemplateOptions }).options = {} as TemplateOptions;\r\n(Nostache as { cache: TemplateCache }).cache = (() => {\r\n    const cache = {\r\n        [IMPORT]: {} as Record<string, string>,\r\n        [ASYNC]: {} as Record<string, TemplateFunction>,\r\n        [FUNCTION]: {} as Record<string, TemplateFunction>,\r\n    };\r\n    return {\r\n        get(key: string, options?: \"import\" | \"function\" | \"async\") {\r\n            return cache[options || FUNCTION][key];\r\n        },\r\n        set(key: string, value: TemplateFunction | string, options?: \"function\" | \"async\") {\r\n            cache[isString(value) ? IMPORT : (options || FUNCTION)][key] = value;\r\n        },\r\n        delete(key: string, options?: \"import\" | \"function\" | \"async\") {\r\n            delete cache[options || FUNCTION][key];\r\n        },\r\n        clear(options?: \"import\" | \"function\" | \"async\") {\r\n            if (options) {\r\n                cache[options] = {};\r\n            } else {\r\n                cache[IMPORT] = {};\r\n                cache[ASYNC] = {};\r\n                cache[FUNCTION] = {};\r\n            }\r\n        },\r\n    } as TemplateCache;\r\n})();\r\n\r\nexport default Nostache;"],"names":["ASYNC","IMPORT","FUNCTION","UNDEFINED","undefined","isString","s","isFunction","f","iterateRecursively","value","next","result","loop","Promise","r","then","chunk","done","isBrowser","Function","Nostache","template","options","extensions","Object","assign","cache","isAllCache","isImportCache","isFunctionCache","escapeFunc","escape","String","replace","c","charCodeAt","importFunc","args","res","rej","cachedTemplate","get","cacheAndResolve","set","optionsImport","import","fetch","response","status","text","Error","url","require","readFile","error","data","e","returnFunc","templateString","cacheOptions","async","templateFunc","templateFuncBody","toString","isWhitespace","isAlphabetic","isAlphanumeric","asyncModifier","index","startIndex","length","funcBody","appendResult","endIndex","extra","slice","appendOutput","unsafe","appendLogic","throwEndOfBlockExpected","block","SyntaxError","throwEndOfDeclarationBlockExpected","parseOpenBlock","n","parseLogicBlock","parseOutputBlock","parseDeclaration","isPotentialHtml","parseStringOrComment","parseTextBlock","parseHtmlBlock","potentialEnd","potentialEndWhitespace","hasMeaningfulSymbol","closeChar","hasOnlyComment","sc","onlyComment","isInString","isInComment","fromCharCode","firstChar","potentialName","name","skipWhitespace","parseTemplateDeclaration","parseImportDeclaration","parseParametersDeclaration","parameters","parentheses","tempFuncBody","lastWhitespace","innerFuncBody","parseTemplate","verbose","console","groupCollapsed","log","reduce","a","t","push","groupEnd","contextFunc","Symbol","iterator","i","apply","message","map","join","key","clear"],"mappings":"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"}