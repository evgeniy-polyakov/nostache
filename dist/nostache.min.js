!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Nostache=t()}(this,(function(){"use strict";const e={};function t(e){function t(e){if(e.length>1){const t={};for(let n=0;n<e.length;n++)t[e.charCodeAt(n)]=!0;return t}return e.charCodeAt(0)}const o=t(" \t\r\n"),r=t("<"),c=t(">"),i=t("{"),f=t("}"),s=t(";"),u=t("="),l=t("\\"),a=t("'");let h=0,d=0;const p=e.length,$=n.resultVariable;let A=`let ${$}='';\n`;function C(t=h,n=""){(t>d||n)&&(A+=`${$}+='${e.slice(d,t)}${n}';\n`)}function b(){h>d&&(A+=`${$}+=${e.slice(d,h)};\n`)}function g(){h>d&&(A+=`${e.slice(d,h)}`)}function y(t){return t===r&&e.charCodeAt(h+1)===i?(C(),h+=2,function(){d=h;let t=!0;for(;h<p;){const n=e.charCodeAt(h);if(n===i)h++,t=!0;else if(t&&o[n])h++;else if(t&&n===r)t=!1,g(),v();else{if(n===f&&e.charCodeAt(h+1)===c){g(),h+=2;break}h++,t=!1}}d=h}(),!0):t===u&&e.charCodeAt(h+1)===i?(C(),h+=2,function(){d=h;let t=!1;for(;h<p;){const n=e.charCodeAt(h);if(n===f&&e.charCodeAt(h+1)===c){t&&b(),h+=2;break}o[n]?h++:(h++,t=!0)}d=h}(),!0):t===r&&e.charCodeAt(h+1)===s&&e.charCodeAt(h+2)===c?(C(),h++,d=h,h++,g(),h++,d=h,!0):t===l?(C(h,"\\\\"),h++,d=h,!0):t===a?(C(h,"\\'"),h++,d=h,!0):(t===r||t===u)&&e.charCodeAt(h+1)===t&&e.charCodeAt(h+2)===i&&(h++,C(),h++,d=h,!0)}function v(){d=h;let t=-1;for(;h<p;){const n=e.charCodeAt(h);if(y(n));else if(n===c)h++,t=h;else if(t>=0&&o[n])h++;else{if(t&&n===f){C(t);break}h++,t=-1}}d=h}for(;h<p;){y(e.charCodeAt(h))||h++}return C(),A+=`return ${$};`,A}function n(o){var r;const c=null!==(r=e[o])&&void 0!==r?r:e[o]=t(o);function i(e){const t=[],o=[],r={};if(e&&"object"==typeof e)for(const n in e)!(n in r)&&/^[_a-z]\w*$/i.test(n)&&(t.push(n),o.push(e[n]));try{return(n.verbose||i.verbose)&&console.log(`(function Nostache(${t.join(", ")}) {\n${c}\n})(`,...o.reduce(((e,t)=>(e.length>0&&e.push(","),e.push("string"==typeof t?`"${t}"`:t),e)),[]),")"),Function(...t,c).apply(e,o)}catch(e){throw e.message+=`\nat (function (${t.join(", ")}) {\n${c}\n})(${o.map((e=>"string"==typeof e?`"${e}"`:e)).join(", ")})`,e}}return i.verbose=!1,i}return n.verbose=!1,n.resultVariable="_",n}));//# sourceMappingURL=nostache.min.js.map
