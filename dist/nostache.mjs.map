{"version":3,"file":"nostache.mjs","sources":["../src/index.ts"],"sourcesContent":["const templateCache: Record<string, string> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo support of older browsers\r\n// todo expressions like <{ const f = function (i) <{ <div>Inner Template {=i=}<div/> }> }> for inner templates in JS strings\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield\r\nconst parseTemplate = (template: string) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unsafe: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unsafe ?\r\n                `yield ${template.slice(startIndex, index)};\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        if (c === OPEN_ANGLE && template.charCodeAt(index + 1) === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && template.charCodeAt(index + 1) === ASSIGN) {\r\n            // Assignment block ={\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && template.charCodeAt(index + 1) === TILDE) {\r\n            // Unsafe assignment block ~{\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // Escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // Escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // Escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isInString = 0;\r\n        let isPotentialText = true; // We can start html block right away\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!isInString && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                isPotentialText = false;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n            } else if (!isInString && c === OPEN_BRACE) {\r\n                index++;\r\n                isPotentialText = true;\r\n            } else if (isPotentialText && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialText && c === OPEN_ANGLE) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (isPotentialText && c === CLOSE_ANGLE) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                index++;\r\n                parseTextBlock();\r\n            } else if (isPotentialText && (c === ASSIGN || c === TILDE)) {\r\n                isPotentialText = false;\r\n                appendLogic();\r\n                index++;\r\n                parseOutputBlock(c === TILDE);\r\n                startIndex--;\r\n            } else if (!isInString && c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialText = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unsafe: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unsafe ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        let isInString = 0;\r\n        for (; index < length;) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (!isInString && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n            } else if (!isInString && c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unsafe);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    for (; index < length;) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(async function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst escape = async (value: unknown) => {\r\n    return String(await value).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`);\r\n};\r\n\r\nconst iterateGenerator = async (generator: AsyncGenerator<any>) => {\r\n    let result = '';\r\n    while (true) {\r\n        const chunk = await generator.next();\r\n        if (chunk.done) {\r\n            break;\r\n        } else {\r\n            if (typeof chunk.value?.next === \"function\") {\r\n                result += await iterateGenerator(chunk.value);\r\n            } else {\r\n                result += await chunk.value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst Nostache = (template: string): ((...context: unknown[]) => Promise<string>) & {\r\n    verbose: boolean,\r\n    toString(): string,\r\n    escape(value: unknown): Promise<string>,\r\n} => {\r\n    const funcBody = templateCache[template] ?? (templateCache[template] = parseTemplate(template));\r\n    const templateFunc = async (...context: unknown[]) => {\r\n        const argNames = [];\r\n        const argValues = [];\r\n        for (const c of context) {\r\n            if (c && typeof c === \"object\" && !Array.isArray(c)) {\r\n                for (const p in c) {\r\n                    if (/^[_a-z]\\w*$/i.test(p)) {\r\n                        argNames.push(p);\r\n                        argValues.push((c as any)[p]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            if (templateFunc.verbose) {\r\n                console.groupCollapsed(`(function Nostache(${argNames.join(\", \")}) {`);\r\n                console.log(`${funcBody}})\\n(`, ...argValues.reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc = (...context: unknown[]) => {\r\n                return templateFunc(...context);\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.escape = templateFunc.escape;\r\n            const generator = Function(...argNames, funcBody).apply(contextFunc, argValues);\r\n            return iterateGenerator(generator);\r\n        } catch (error: any) {\r\n            error.message += `\\nat function (${argNames.join(\", \")}) {\\n${funcBody}\\n})(${\r\n                argValues.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    };\r\n    templateFunc.verbose = Nostache.verbose;\r\n    templateFunc.escape = escape;\r\n    templateFunc.toString = () => funcBody;\r\n    return templateFunc;\r\n};\r\n\r\nNostache.verbose = false;\r\nNostache.escape = escape;\r\n\r\nexport default Nostache;"],"names":[],"mappings":"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"}