{"version":3,"file":"nostache.mjs","sources":["../src/index.ts"],"sourcesContent":["type TemplateFunction = (this: TemplateFunction & {\r\n    escape(value: unknown): Promise<string>,\r\n    load(input: string | URL | Request, init?: RequestInit): Promise<TemplateFunction>;\r\n}, ...context: any[]) => Promise<string>;\r\ntype TemplateOptions = {\r\n    async?: boolean;\r\n    verbose?: boolean;\r\n    load?(input: string | URL | Request, init?: RequestInit): string | Promise<string>;\r\n    escape?(value: string): string;\r\n};\r\nconst templateCache: Record<string, TemplateFunction> = {};\r\n\r\n// todo errors for unfinished expressions\r\n// todo extension functions\r\n// todo cache tests, cache clear function\r\n// todo options tests, make sure options are not stored in cache\r\n// todo default template options\r\n// todo output {=  =} or {~  ~} as whitespace `  `\r\n// todo layout/block/region technics\r\n// todo table of control characters in readme.md\r\n// todo ; before yield in some cases\r\nconst parseTemplate = (template: string, options?: TemplateOptions) => {\r\n\r\n    const charCode = (char: string) => {\r\n        if (char.length > 1) {\r\n            const map: Record<number, boolean> = {};\r\n            for (let i = 0; i < char.length; i++) {\r\n                map[char.charCodeAt(i)] = true;\r\n            }\r\n            return map;\r\n        }\r\n        return char.charCodeAt(0);\r\n    };\r\n\r\n    const isWhitespace = charCode(\" \\t\\r\\n\") as Record<number, boolean>;\r\n    const isAlphabetic = (c: number) => c === 95 || (c >= 65 && c <= 90) || (c >= 97 && c <= 122);\r\n    const isAlphanumeric = (c: number) => isAlphabetic(c) || (c >= 48 && c <= 57);\r\n    const OPEN_ANGLE = charCode(\"<\");\r\n    const CLOSE_ANGLE = charCode(\">\");\r\n    const OPEN_BRACE = charCode(\"{\");\r\n    const CLOSE_BRACE = charCode(\"}\");\r\n    const OPEN_PARENTHESES = charCode(\"(\");\r\n    const CLOSE_PARENTHESES = charCode(\")\");\r\n    const ASSIGN = charCode(\"=\");\r\n    const TILDE = charCode(\"~\");\r\n    const SLASH = charCode(\"/\");\r\n    const ASTERISK = charCode(\"*\");\r\n    const NEWLINE = charCode(\"\\n\");\r\n    const BACKSLASH = charCode(\"\\\\\");\r\n    const APOSTROPHE = charCode(\"'\");\r\n    const QUOTE = charCode(\"\\\"\");\r\n    const BACKTICK = charCode(\"`\");\r\n    const DOLLAR = charCode(\"$\");\r\n    const AT_SIGN = charCode(\"@\");\r\n\r\n    let index = 0;\r\n    let startIndex = 0;\r\n    const length = template.length;\r\n    let funcBody = \"\";\r\n\r\n    const appendResult = (endIndex = index, extra = \"\") => {\r\n        if (endIndex > startIndex || extra) {\r\n            funcBody += `yield \\`${template.slice(startIndex, endIndex)}${extra}\\`;\\n`;\r\n        }\r\n    };\r\n\r\n    const appendOutput = (unescape: boolean) => {\r\n        if (index > startIndex) {\r\n            funcBody += unescape ?\r\n                `yield (${template.slice(startIndex, index)});\\n` :\r\n                `yield this.escape(${template.slice(startIndex, index)});\\n`;\r\n        }\r\n    };\r\n\r\n    const appendLogic = () => {\r\n        if (index > startIndex) {\r\n            funcBody += `${template.slice(startIndex, index)}`;\r\n        }\r\n    };\r\n\r\n    const parseOpenBlock = (c: number) => {\r\n        const n = template.charCodeAt(index + 1);\r\n        if (c === OPEN_ANGLE && n === OPEN_BRACE) {\r\n            // Logic block <{\r\n            appendResult();\r\n            index += 2;\r\n            parseLogicBlock();\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === ASSIGN) {\r\n            // Assignment block {=\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(false);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === TILDE) {\r\n            // Unescape assignment block {~\r\n            appendResult();\r\n            index += 2;\r\n            parseOutputBlock(true);\r\n            return true;\r\n        } else if (c === OPEN_BRACE && n === AT_SIGN) {\r\n            // Declaration block {@\r\n            appendResult();\r\n            index += 2;\r\n            parseDeclaration();\r\n            return true;\r\n        } else if (c === BACKSLASH) {\r\n            // escape backslash \\\r\n            appendResult(index, \"\\\\\\\\\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === BACKTICK) {\r\n            // escape backtick\r\n            appendResult(index, \"\\\\`\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        } else if (c === DOLLAR) {\r\n            // escape dollar\r\n            appendResult(index, \"\\\\$\");\r\n            index++;\r\n            startIndex = index;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const parseLogicBlock = () => {\r\n        startIndex = index;\r\n        let isPotentialHtml = true; // We can start html block right away\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                isPotentialHtml = false;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_BRACE) {\r\n                index++;\r\n                const n = template.charCodeAt(index);\r\n                if (n === CLOSE_ANGLE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseTextBlock();\r\n                } else if (n === ASSIGN || n === TILDE) {\r\n                    isPotentialHtml = false;\r\n                    appendLogic();\r\n                    index++;\r\n                    parseOutputBlock(n === TILDE);\r\n                    startIndex--;\r\n                } else if (n === AT_SIGN) {\r\n                    isPotentialHtml = false;\r\n                    index--;\r\n                    appendLogic();\r\n                    index += 2;\r\n                    parseDeclaration();\r\n                } else {\r\n                    isPotentialHtml = true;\r\n                }\r\n            } else if (isPotentialHtml && isWhitespace[c]) {\r\n                index++;\r\n            } else if (isPotentialHtml && c === OPEN_ANGLE) {\r\n                isPotentialHtml = false;\r\n                appendLogic();\r\n                parseHtmlBlock();\r\n            } else if (c === CLOSE_BRACE && template.charCodeAt(index + 1) === CLOSE_ANGLE) {\r\n                appendLogic();\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                isPotentialHtml = false;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseHtmlBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === CLOSE_ANGLE) {\r\n                index++;\r\n                potentialEnd = index;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEnd);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseTextBlock = () => {\r\n        startIndex = index;\r\n        let potentialEnd = -1;\r\n        let potentialEndWhitespace = -1;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                startIndex++;\r\n                index++;\r\n            } else if (hasMeaningfulSymbol && (c === OPEN_ANGLE || isWhitespace[c])) {\r\n                if (potentialEndWhitespace < 0) potentialEndWhitespace = index;\r\n                if (c === OPEN_ANGLE) potentialEnd = index;\r\n                index++;\r\n            } else if (potentialEnd >= 0 && isWhitespace[c]) {\r\n                index++;\r\n            } else if (potentialEnd >= 0 && c === CLOSE_BRACE) {\r\n                appendResult(potentialEndWhitespace);\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                hasMeaningfulSymbol = true;\r\n            } else {\r\n                index++;\r\n                potentialEnd = -1;\r\n                potentialEndWhitespace = -1;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseOutputBlock = (unescape: boolean) => {\r\n        startIndex = index;\r\n        const closeChar = unescape ? TILDE : ASSIGN;\r\n        let hasMeaningfulSymbol = false;\r\n        while (index < length) {\r\n            if (parseStringOrComment()) {\r\n                hasMeaningfulSymbol = true;\r\n                continue;\r\n            }\r\n            const c = template.charCodeAt(index);\r\n            if (!hasMeaningfulSymbol && isWhitespace[c]) {\r\n                index++;\r\n            } else if (c === closeChar && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                if (hasMeaningfulSymbol) {\r\n                    appendOutput(unescape);\r\n                }\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n                hasMeaningfulSymbol = true;\r\n            }\r\n        }\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseStringOrComment = () => {\r\n        let isInString = 0;\r\n        let isInComment = 0;\r\n        let result = false;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            let n = 0;\r\n            if (!isInString && !isInComment && (c === APOSTROPHE || c === QUOTE || c === BACKTICK)) {\r\n                isInString = c;\r\n                index++;\r\n                result = true;\r\n            } else if (isInString && c === BACKSLASH) {\r\n                index += 2;\r\n            } else if (isInString && c === isInString) {\r\n                isInString = 0;\r\n                index++;\r\n                return true;\r\n            } else if (!isInString && !isInComment && c === SLASH && ((n = template.charCodeAt(index + 1)) === SLASH || n === ASTERISK)) {\r\n                isInComment = n;\r\n                index += 2;\r\n                result = true;\r\n            } else if (isInComment === SLASH && c === NEWLINE) {\r\n                isInComment = 0;\r\n                index++;\r\n            } else if (isInComment === ASTERISK && c === ASTERISK && template.charCodeAt(index + 1) === SLASH) {\r\n                isInComment = 0;\r\n                index += 2;\r\n                return true;\r\n            } else if (isInComment || isInString) {\r\n                index++;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const parseDeclaration = () => {\r\n        startIndex = index;\r\n        let firstChar = 0;\r\n        let potentialName = false;\r\n        let name = \"\";\r\n        while (index < length) {\r\n            let c = template.charCodeAt(index);\r\n            if (!firstChar) {\r\n                c = skipWhitespace(c);\r\n                startIndex = index;\r\n                firstChar = c;\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration();\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    index++;\r\n                    parseloadDeclaration();\r\n                    break;\r\n                } else if (isAlphabetic(firstChar)) {\r\n                    index++;\r\n                    potentialName = true;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else if (potentialName && isAlphanumeric(c)) {\r\n                index++;\r\n            } else if (potentialName && !isAlphanumeric(c)) {\r\n                name = template.slice(startIndex, index);\r\n                c = skipWhitespace(c);\r\n                if (c === OPEN_PARENTHESES) {\r\n                    index++;\r\n                    parseTemplateDeclaration(name);\r\n                    break;\r\n                } else if (c === APOSTROPHE || c === QUOTE || c === BACKTICK) {\r\n                    startIndex = index;\r\n                    index++;\r\n                    parseloadDeclaration(name);\r\n                    break;\r\n                } else {\r\n                    parseParametersDeclaration();\r\n                    break;\r\n                }\r\n            } else {\r\n                parseParametersDeclaration();\r\n                break;\r\n            }\r\n        }\r\n        skipWhitespace(template.charCodeAt(index));\r\n        startIndex = index;\r\n    };\r\n\r\n    const parseParametersDeclaration = () => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                funcBody += `let[${template.slice(startIndex, index)}]=this;\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseloadDeclaration = (name?: string) => {\r\n        while (index < length) {\r\n            if (template.charCodeAt(index) === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE && index > startIndex) {\r\n                if (name) funcBody += `let ${name}=`;\r\n                funcBody += `this.load(${template.slice(startIndex, index)})\\n`;\r\n                index += 2;\r\n                break;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const parseTemplateDeclaration = (name?: string) => {\r\n        startIndex = index;\r\n        let parameters = \"\";\r\n        let parentheses = 0;\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (c === OPEN_PARENTHESES) {\r\n                parentheses++;\r\n            } else if (c === CLOSE_PARENTHESES) {\r\n                if (parentheses) {\r\n                    parentheses--;\r\n                    index++;\r\n                } else {\r\n                    parameters = template.slice(startIndex, index);\r\n                    index++;\r\n                    skipWhitespace(template.charCodeAt(index));\r\n                    startIndex = index;\r\n                    break;\r\n                }\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n        const tempFuncBody = funcBody;\r\n        let lastWhitespace = -1;\r\n        funcBody = \"\";\r\n        while (index < length) {\r\n            const c = template.charCodeAt(index);\r\n            if (isWhitespace[c]) {\r\n                lastWhitespace = index;\r\n                index++;\r\n            } else if (c === AT_SIGN && template.charCodeAt(index + 1) === CLOSE_BRACE) {\r\n                appendResult(lastWhitespace > -1 ? lastWhitespace : index);\r\n                const innerFuncBody = funcBody;\r\n                funcBody = tempFuncBody;\r\n                if (name) {\r\n                    funcBody += `let ${name}=`;\r\n                }\r\n                funcBody += `(${options?.async ? \"async \" : \"\"}function*(${parameters}){${innerFuncBody}}.bind(this))\\n`;\r\n                index += 2;\r\n                break;\r\n            } else if (parseOpenBlock(c)) {\r\n                // continue\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n    };\r\n\r\n    const skipWhitespace = (c: number) => {\r\n        while (index < length && isWhitespace[c]) {\r\n            index++;\r\n            c = template.charCodeAt(index);\r\n        }\r\n        return c;\r\n    };\r\n\r\n    while (index < length) {\r\n        const c = template.charCodeAt(index);\r\n        if (parseOpenBlock(c)) {\r\n            // continue\r\n        } else {\r\n            index++;\r\n        }\r\n    }\r\n    appendResult();\r\n    return `return(${options?.async ? \"async \" : \"\"}function*(){\\n${funcBody}}).call(this)`;\r\n}\r\n\r\nconst getTemplateKey = (template: string, options?: TemplateOptions) => {\r\n    return options?.async ? `async ${template}` : template;\r\n};\r\n\r\nconst iterateRecursively = (value: any) => {\r\n    if (typeof value.next === \"function\") {\r\n        let result = \"\";\r\n        let loop = () => new Promise(r => r(value.next())).then((chunk: any): string | Promise<string> =>\r\n            chunk.done ? result : iterateRecursively(chunk.value).then(s => result = result + s).then(loop));\r\n        return loop().then(() => result);\r\n    }\r\n    return new Promise<string>(r => r(value));\r\n};\r\n\r\nconst Nostache = (template: string | Promise<string>, options?: TemplateOptions): TemplateFunction => {\r\n    if (typeof template === \"string\") {\r\n        const key = getTemplateKey(template, options);\r\n        if (templateCache[key]) {\r\n            return templateCache[key];\r\n        }\r\n    }\r\n    options = {\r\n        ...Nostache.options,\r\n        ...options,\r\n    };\r\n    const escape = (value: unknown) => {\r\n        return iterateRecursively(value).then(options?.escape ?? (s => String(s).replace(/[&<>\"']/g, c => `&#${c.charCodeAt(0)};`)));\r\n    };\r\n    const load = (input: string | URL | Request, init?: RequestInit) => {\r\n        return Nostache(options?.load?.(input, init) ?? fetch(input, init).then(r => r.text()));\r\n    };\r\n    const templateFunc = (...context: any[]) => new Promise<string>(r => r(template)).then((templateString: string) => {\r\n        const key = getTemplateKey(templateString, options);\r\n        if (templateCache[key] && templateCache[key] !== templateFunc) {\r\n            (templateCache as any)[key](...context);\r\n        }\r\n        const funcBody = parseTemplate(templateString, options);\r\n        templateCache[key] = templateFunc;\r\n        try {\r\n            if (options?.verbose) {\r\n                console.groupCollapsed(`(function () {`);\r\n                console.log(`${funcBody}})\\n(`, ...context.reduce((a, t) => {\r\n                    if (a.length > 0) a.push(\",\");\r\n                    a.push(typeof t === \"string\" ? `\"${t}\"` : t);\r\n                    return a;\r\n                }, []), \")\")\r\n                console.groupEnd();\r\n            }\r\n            const contextFunc = (...context: unknown[]) => {\r\n                return templateFunc(...context);\r\n            };\r\n            (contextFunc as any)[Symbol.iterator] = function* () {\r\n                yield* context;\r\n            };\r\n            for (let i = 0; i < context.length; i++) {\r\n                (contextFunc as any)[i] = context[i];\r\n            }\r\n            contextFunc.load = load;\r\n            contextFunc.escape = escape;\r\n            return iterateRecursively(Function(funcBody).apply(contextFunc));\r\n        } catch (error: any) {\r\n            error.message += `\\nat function () {\\n${funcBody}\\n})(${\r\n                context.map(t => typeof t === \"string\" ? `\"${t}\"` : t).join(\", \")\r\n            })`;\r\n            throw error;\r\n        }\r\n    });\r\n    return templateFunc;\r\n};\r\n\r\nNostache.options = {} as TemplateOptions;\r\n\r\nexport default Nostache;"],"names":[],"mappings":"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"}